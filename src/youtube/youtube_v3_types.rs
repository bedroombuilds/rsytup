#![allow(unused_variables, unused_mut, dead_code)]
#![allow(clippy::all)]
//! This file was generated by async-google-apis. (https://github.com/dermesser/async-google-apis)
//!
//! (c) 2020 Lewin Bormann <lbo@spheniscida.de>
//!
//! ## Getting started
//!
//! **Tip**: Take a look at those types ending in `...Service`. These represent API resources
//! and contain methods to interact with an API. The remaining types are used by those methods
//! and can be explored starting from a method you want to use.
//!
//! I'd be happy if you let me know about your use case of this code.
//!
//! THIS FILE HAS BEEN GENERATED -- SAVE ANY MODIFICATIONS BEFORE REPLACING.

use async_google_apis_common::*;

/// Scopes of this API. Convertible to their string representation with `AsRef`.
#[derive(Debug, Clone, Copy)]
pub enum YoutubeScopes {
    /// See, edit, and permanently delete your YouTube videos, ratings, comments and captions
    ///
    /// URL: https://www.googleapis.com/auth/youtube.force-ssl
    YoutubeForceSsl,
    /// View private information of your YouTube channel relevant during the audit process with a YouTube partner
    ///
    /// URL: https://www.googleapis.com/auth/youtubepartner-channel-audit
    YoutubepartnerChannelAudit,
    /// See a list of your current active channel members, their current level, and when they became a member
    ///
    /// URL: https://www.googleapis.com/auth/youtube.channel-memberships.creator
    YoutubeChannelMembershipsCreator,
    /// Manage your YouTube account
    ///
    /// URL: https://www.googleapis.com/auth/youtube
    Youtube,
    /// Manage your YouTube videos
    ///
    /// URL: https://www.googleapis.com/auth/youtube.upload
    YoutubeUpload,
    /// View and manage your assets and associated content on YouTube
    ///
    /// URL: https://www.googleapis.com/auth/youtubepartner
    Youtubepartner,
    /// View your YouTube account
    ///
    /// URL: https://www.googleapis.com/auth/youtube.readonly
    YoutubeReadonly,
}

impl std::convert::AsRef<str> for YoutubeScopes {
    fn as_ref(&self) -> &'static str {
        match self {
            YoutubeScopes::YoutubeForceSsl => "https://www.googleapis.com/auth/youtube.force-ssl",
            YoutubeScopes::YoutubepartnerChannelAudit => {
                "https://www.googleapis.com/auth/youtubepartner-channel-audit"
            }
            YoutubeScopes::YoutubeChannelMembershipsCreator => {
                "https://www.googleapis.com/auth/youtube.channel-memberships.creator"
            }
            YoutubeScopes::Youtube => "https://www.googleapis.com/auth/youtube",
            YoutubeScopes::YoutubeUpload => "https://www.googleapis.com/auth/youtube.upload",
            YoutubeScopes::Youtubepartner => "https://www.googleapis.com/auth/youtubepartner",
            YoutubeScopes::YoutubeReadonly => "https://www.googleapis.com/auth/youtube.readonly",
        }
    }
}

/// Describes processing status and progress and availability of some other Video resource parts.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoProcessingDetails {
    /// This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
    #[serde(rename = "processingIssuesAvailability")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_issues_availability: Option<String>,
    #[serde(rename = "processingProgress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_progress: Option<VideoProcessingDetailsProcessingProgress>,
    /// This value indicates whether thumbnail images have been generated for the video.
    #[serde(rename = "thumbnailsAvailability")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails_availability: Option<String>,
    /// This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
    #[serde(rename = "tagSuggestionsAvailability")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tag_suggestions_availability: Option<String>,
    /// The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
    #[serde(rename = "processingFailureReason")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_failure_reason: Option<String>,
    /// This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
    #[serde(rename = "fileDetailsAvailability")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub file_details_availability: Option<String>,
    /// The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
    #[serde(rename = "processingStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_status: Option<String>,
    /// This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
    #[serde(rename = "editorSuggestionsAvailability")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor_suggestions_availability: Option<String>,
}

/// Details about a resource which is being promoted.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsPromotedItem {
    /// The text description to accompany the promoted item.
    #[serde(rename = "descriptionText")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description_text: Option<String>,
    /// The ID that YouTube uses to uniquely identify the promoted video.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
    /// The URL the client should fetch to request a promoted item.
    #[serde(rename = "adTag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ad_tag: Option<String>,
    /// The URL the client should ping to indicate that the user was shown this promoted item.
    #[serde(rename = "creativeViewUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creative_view_url: Option<String>,
    /// The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
    #[serde(rename = "forecastingUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub forecasting_url: Option<Vec<String>>,
    /// The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
    #[serde(rename = "customCtaButtonText")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custom_cta_button_text: Option<String>,
    /// The URL the client should ping to indicate that the user clicked through on this promoted item.
    #[serde(rename = "clickTrackingUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub click_tracking_url: Option<String>,
    /// The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
    #[serde(rename = "destinationUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination_url: Option<String>,
    /// The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
    #[serde(rename = "impressionUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub impression_url: Option<Vec<String>>,
    /// The type of call-to-action, a message to the user indicating action that can be taken.
    #[serde(rename = "ctaType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cta_type: Option<String>,
}

/// Brief description of the live stream status.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamStatus {
    #[serde(rename = "streamStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stream_status: Option<String>,
    #[serde(rename = "healthStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub health_status: Option<LiveStreamHealthStatus>,
}

/// Information about a video that was marked as a favorite video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsFavorite {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
}

/// Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 13
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemSnippet {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
    /// The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
    #[serde(rename = "playlistId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub playlist_id: Option<String>,
    /// The item's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Channel title for the channel that the playlist item belongs to.
    #[serde(rename = "channelTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_title: Option<String>,
    /// The item's description.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
    #[serde(rename = "position")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub position: Option<u32>,
    /// The date and time that the item was added to the playlist. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
}

/// Basic details about a playlist, including title, description and thumbnails.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistSnippet {
    /// Keyword tags associated with the playlist.
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// The playlist's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The date and time that the playlist was created. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// The channel title of the channel that the video belongs to.
    #[serde(rename = "channelTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_title: Option<String>,
    /// The language of the playlist's default title and description.
    #[serde(rename = "defaultLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    #[serde(rename = "localized")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localized: Option<PlaylistLocalization>,
    /// The ID that YouTube uses to uniquely identify the channel that published the playlist.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The playlist's description.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionListResponse {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#captionListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// A list of captions that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Caption>>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

/// Branding properties for images associated with the channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ImageSettings {
    /// Banner image. Mobile size medium/high resolution (960x263).
    #[serde(rename = "bannerMobileMediumHdImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_mobile_medium_hd_image_url: Option<String>,
    /// Banner image. Mobile size (640x175).
    #[serde(rename = "bannerMobileImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_mobile_image_url: Option<String>,
    #[serde(rename = "largeBrandedBannerImageImapScript")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub large_branded_banner_image_imap_script: Option<LocalizedProperty>,
    /// Banner image. Mobile size low resolution (320x88).
    #[serde(rename = "bannerMobileLowImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_mobile_low_image_url: Option<String>,
    #[serde(rename = "watchIconImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub watch_icon_image_url: Option<String>,
    /// Banner image. Desktop size (1060x175).
    #[serde(rename = "bannerImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_image_url: Option<String>,
    /// This is used only in update requests; if it's set, we use this URL to generate all of the above banner URLs.
    #[serde(rename = "bannerExternalUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_external_url: Option<String>,
    /// Banner image. TV size medium resolution (1280x720).
    #[serde(rename = "bannerTvMediumImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tv_medium_image_url: Option<String>,
    /// Banner image. Tablet size (1707x283).
    #[serde(rename = "bannerTabletImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tablet_image_url: Option<String>,
    /// Banner image. Mobile size high resolution (1280x360).
    #[serde(rename = "bannerMobileHdImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_mobile_hd_image_url: Option<String>,
    /// Banner image. TV size high resolution (1920x1080).
    #[serde(rename = "bannerTvHighImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tv_high_image_url: Option<String>,
    #[serde(rename = "smallBrandedBannerImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub small_branded_banner_image_url: Option<LocalizedProperty>,
    /// Banner image. TV size extra high resolution (2120x1192).
    #[serde(rename = "bannerTvImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tv_image_url: Option<String>,
    #[serde(rename = "largeBrandedBannerImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub large_branded_banner_image_url: Option<LocalizedProperty>,
    /// Banner image. TV size low resolution (854x480).
    #[serde(rename = "bannerTvLowImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tv_low_image_url: Option<String>,
    /// Banner image. Tablet size low resolution (1138x188).
    #[serde(rename = "bannerTabletLowImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tablet_low_image_url: Option<String>,
    /// The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
    #[serde(rename = "trackingImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tracking_image_url: Option<String>,
    #[serde(rename = "smallBrandedBannerImageImapScript")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub small_branded_banner_image_imap_script: Option<LocalizedProperty>,
    /// Banner image. Tablet size high resolution (2276x377).
    #[serde(rename = "bannerTabletHdImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tablet_hd_image_url: Option<String>,
    /// Banner image. Tablet size extra high resolution (2560x424).
    #[serde(rename = "bannerTabletExtraHdImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_tablet_extra_hd_image_url: Option<String>,
    #[serde(rename = "backgroundImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub background_image_url: Option<LocalizedProperty>,
    /// Banner image. Mobile size high resolution (1440x395).
    #[serde(rename = "bannerMobileExtraHdImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner_mobile_extra_hd_image_url: Option<String>,
}

/// Stub token pagination template to suppress results.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TokenPagination {}

/// The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelConversionPings {
    /// Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
    #[serde(rename = "pings")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pings: Option<Vec<ChannelConversionPing>>,
}

/// Information that identifies the recommended resource.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsRecommendation {
    /// The reason that the resource is recommended to the user.
    #[serde(rename = "reason")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
    #[serde(rename = "seedResourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub seed_resource_id: Option<ResourceId>,
}

/// A *video* resource represents a YouTube video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Video {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#video".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "projectDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub project_details: Option<VideoProjectDetails>,
    #[serde(rename = "fileDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub file_details: Option<VideoFileDetails>,
    #[serde(rename = "ageGating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub age_gating: Option<VideoAgeGating>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<VideoSnippet>,
    /// The ID that YouTube uses to uniquely identify the video.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "topicDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_details: Option<VideoTopicDetails>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<VideoContentDetails>,
    #[serde(rename = "monetizationDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub monetization_details: Option<VideoMonetizationDetails>,
    #[serde(rename = "recordingDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recording_details: Option<VideoRecordingDetails>,
    /// The localizations object contains localized versions of the basic details about the video, such as its title and description.
    #[serde(rename = "localizations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localizations: Option<HashMap<String, VideoLocalization>>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<VideoStatus>,
    #[serde(rename = "processingDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_details: Option<VideoProcessingDetails>,
    #[serde(rename = "suggestions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub suggestions: Option<VideoSuggestions>,
    #[serde(rename = "player")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub player: Option<VideoPlayer>,
    #[serde(rename = "statistics")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub statistics: Option<VideoStatistics>,
    #[serde(rename = "liveStreamingDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_streaming_details: Option<VideoLiveStreamingDetails>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamSnippet {
    #[serde(rename = "isDefaultStream")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_default_stream: Option<bool>,
    /// The date and time that the stream was created. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The stream's description. The value cannot be longer than 10000 characters.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The stream's title. The value must be between 1 and 128 characters long.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SearchResult {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#searchResult".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<ResourceId>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<SearchResultSnippet>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

/// Details about a channelsection, including playlists and channels.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionContentDetails {
    /// The channel ids for type multiple_channels.
    #[serde(rename = "channels")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channels: Option<Vec<String>>,
    /// The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
    #[serde(rename = "playlists")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub playlists: Option<Vec<String>>,
}

/// Basic details about rating of a video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoRating {
    /// Rating of a video.
    #[serde(rename = "rating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rating: Option<String>,
    /// The ID that YouTube uses to uniquely identify the video.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThreadListResponse {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#commentThreadListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// A list of comment threads that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<CommentThread>>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

/// A `__videoAbuseReportReason__` resource identifies a reason that a video could be reported as abusive. Video abuse report reasons are used with `video.ReportAbuse`.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAbuseReportReason {
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<VideoAbuseReportReasonSnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReason"`.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The ID of this abuse report reason.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

/// Details about the content to witch a subscription refers.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionContentDetails {
    /// The type of activity this subscription is for (only uploads, everything).
    #[serde(rename = "activityType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activity_type: Option<String>,
    /// The number of new items in the subscription since its content was last read.
    #[serde(rename = "newItemCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub new_item_count: Option<u32>,
    /// The approximate number of items that the subscription points to.
    #[serde(rename = "totalItemCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_item_count: Option<u32>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessageRetractedDetails {
    #[serde(rename = "retractedMessageId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub retracted_message_id: Option<String>,
}

/// Information about an audio stream.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoFileDetailsAudioStream {
    /// The audio codec that the stream uses.
    #[serde(rename = "codec")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub codec: Option<String>,
    /// The number of audio channels that the stream contains.
    #[serde(rename = "channelCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_count: Option<u32>,
    /// A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
    #[serde(rename = "vendor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
    /// u64: The audio stream's bitrate, in bits per second.
    #[serde(rename = "bitrateBps")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bitrate_bps: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistPlayer {
    /// An <iframe> tag that embeds a player that will play the playlist.
    #[serde(rename = "embedHtml")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embed_html: Option<String>,
}

/// JSON template for the status part of a channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelStatus {
    #[serde(rename = "madeForKids")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub made_for_kids: Option<bool>,
    /// If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
    #[serde(rename = "isLinked")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_linked: Option<bool>,
    /// Privacy status of the channel.
    #[serde(rename = "privacyStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub privacy_status: Option<String>,
    /// The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.
    #[serde(rename = "longUploadsStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub long_uploads_status: Option<String>,
    #[serde(rename = "selfDeclaredMadeForKids")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub self_declared_made_for_kids: Option<bool>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SponsorListResponse {
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string `"youtube#sponsorListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The `visitorId` identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// The token that can be used as the value of the `pageToken` parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// A list of sponsors that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Sponsor>>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
}

/// Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoSuggestions {
    /// A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
    #[serde(rename = "processingWarnings")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_warnings: Option<Vec<String>>,
    /// A list of suggestions that may improve YouTube's ability to process the video.
    #[serde(rename = "processingHints")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_hints: Option<Vec<String>>,
    /// A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
    #[serde(rename = "tagSuggestions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tag_suggestions: Option<Vec<VideoSuggestionsTagSuggestion>>,
    /// A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
    #[serde(rename = "processingErrors")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub processing_errors: Option<Vec<String>>,
    /// A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
    #[serde(rename = "editorSuggestions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub editor_suggestions: Option<Vec<String>>,
}

/// Basic details about a comment, such as its author and text.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentSnippet {
    /// The URL for the avatar of the user who posted the comment.
    #[serde(rename = "authorProfileImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author_profile_image_url: Option<String>,
    /// The date and time when the comment was orignally published. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// The total number of likes this comment has received.
    #[serde(rename = "likeCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub like_count: Option<u32>,
    /// The date and time when was last updated . The value is specified in ISO 8601 format.
    #[serde(rename = "updatedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
    #[serde(rename = "textOriginal")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text_original: Option<String>,
    /// The ID of the video the comment refers to, if any.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
    /// The unique id of the parent comment, only set for replies.
    #[serde(rename = "parentId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    /// The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The comment's moderation status. Will not be set if the comments were requested through the id filter.
    #[serde(rename = "moderationStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moderation_status: Option<String>,
    /// The name of the user who posted the comment.
    #[serde(rename = "authorDisplayName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author_display_name: Option<String>,
    /// Whether the current viewer can rate this comment.
    #[serde(rename = "canRate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub can_rate: Option<bool>,
    /// Link to the author's YouTube channel, if any.
    #[serde(rename = "authorChannelUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author_channel_url: Option<String>,
    /// The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
    #[serde(rename = "textDisplay")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text_display: Option<String>,
    #[serde(rename = "authorChannelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author_channel_id: Option<CommentSnippetAuthorChannelId>,
    /// The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
    #[serde(rename = "viewerRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub viewer_rating: Option<String>,
}

/// A *membershipsLevel* resource represents an offer made by YouTube creators for their fans. Users can become members of the channel by joining one of the available levels. They will provide recurring monetary support and receives special benefits.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsLevel {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<MembershipsLevelSnippet>,
    /// The ID that YouTube assigns to uniquely identify the memberships level.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemContentDetails {
    /// The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
    #[serde(rename = "startAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start_at: Option<String>,
    /// The date and time that the video was published to YouTube. The value is specified in ISO 8601 format.
    #[serde(rename = "videoPublishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_published_at: Option<String>,
    /// A user-generated note for this item.
    #[serde(rename = "note")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    /// The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
    #[serde(rename = "endAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub end_at: Option<String>,
    /// The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamListResponse {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveStreamListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// A list of live streams that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<LiveStream>>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
}

/// Information specific to a store on a merchandising platform linked to a YouTube channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelToStoreLinkDetails {
    /// Name of the store.
    #[serde(rename = "storeName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub store_name: Option<String>,
    /// Landing page of the store.
    #[serde(rename = "storeUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub store_url: Option<String>,
}

/// Freebase topic information related to the channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelTopicDetails {
    /// A list of Wikipedia URLs that describe the channel's content.
    #[serde(rename = "topicCategories")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_categories: Option<Vec<String>>,
    /// A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
    #[serde(rename = "topicIds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_ids: Option<Vec<String>>,
}

/// The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelContentOwnerDetails {
    /// The ID of the content owner linked to the channel.
    #[serde(rename = "contentOwner")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_owner: Option<String>,
    /// The date and time of when the channel was linked to the content owner. The value is specified in ISO 8601 format.
    #[serde(rename = "timeLinked")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time_linked: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatSuperChatDetails {
    /// A rendered string that displays the fund amount and currency to the user.
    #[serde(rename = "amountDisplayString")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_display_string: Option<String>,
    /// The comment added by the user to this Super Chat event.
    #[serde(rename = "userComment")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_comment: Option<String>,
    /// u64: The amount purchased by the user, in micros (1,750,000 micros = 1.75).
    #[serde(rename = "amountMicros")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_micros: Option<String>,
    /// The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
    #[serde(rename = "tier")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tier: Option<u32>,
    /// The currency in which the purchase was made.
    #[serde(rename = "currency")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
}

/// Details about a channel bulletin post.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsBulletin {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
}

/// Statistics about a channel: number of subscribers, number of videos in the channel, etc.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelStatistics {
    /// Whether or not the number of subscribers is shown for this user.
    #[serde(rename = "hiddenSubscriberCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hidden_subscriber_count: Option<bool>,
    /// u64: The number of comments for the channel.
    #[serde(rename = "commentCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment_count: Option<String>,
    /// u64: The number of subscribers that the channel has.
    #[serde(rename = "subscriberCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subscriber_count: Option<String>,
    /// u64: The number of times the channel has been viewed.
    #[serde(rename = "viewCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub view_count: Option<String>,
    /// u64: The number of videos uploaded to the channel.
    #[serde(rename = "videoCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_count: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsDuration {
    /// The date and time when the user became a continuous member across all levels.
    #[serde(rename = "memberSince")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member_since: Option<String>,
    /// The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer).
    #[serde(rename = "memberTotalDurationMonths")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member_total_duration_months: Option<i32>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelListResponse {
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Channel>>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AbuseReport {
    #[serde(rename = "relatedEntities")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub related_entities: Option<Vec<RelatedEntity>>,
    #[serde(rename = "abuseTypes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub abuse_types: Option<Vec<AbuseType>>,
    #[serde(rename = "subject")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subject: Option<Entity>,
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

/// Basic broadcast information.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastSnippet {
    /// Indicates whether this broadcast is the default broadcast. Internal only.
    #[serde(rename = "isDefaultBroadcast")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_default_broadcast: Option<bool>,
    /// The date and time that the broadcast actually started. This information is only available once the broadcast's state is live. The value is specified in ISO 8601 format.
    #[serde(rename = "actualStartTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual_start_time: Option<String>,
    /// The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// The date and time that the broadcast is scheduled to end. The value is specified in ISO 8601 format.
    #[serde(rename = "scheduledEndTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_end_time: Option<String>,
    /// The id of the live chat for this broadcast.
    #[serde(rename = "liveChatId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_chat_id: Option<String>,
    /// The date and time that the broadcast is scheduled to start. The value is specified in ISO 8601 format.
    #[serde(rename = "scheduledStartTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_start_time: Option<String>,
    /// The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The date and time that the broadcast was added to YouTube's live broadcast schedule. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete. The value is specified in ISO 8601 format.
    #[serde(rename = "actualEndTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual_end_time: Option<String>,
}

/// Describes information necessary for ingesting an RTMP or an HTTP stream.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct IngestionInfo {
    /// This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
    #[serde(rename = "rtmpsBackupIngestionAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rtmps_backup_ingestion_address: Option<String>,
    /// The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
    #[serde(rename = "backupIngestionAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub backup_ingestion_address: Option<String>,
    /// The HTTP or RTMP stream name that YouTube assigns to the video stream.
    #[serde(rename = "streamName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stream_name: Option<String>,
    /// This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
    #[serde(rename = "rtmpsIngestionAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rtmps_ingestion_address: Option<String>,
    /// The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME*
    #[serde(rename = "ingestionAddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingestion_address: Option<String>,
}

/// Information about the uploaded video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsUpload {
    /// The ID that YouTube uses to uniquely identify the uploaded video.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
}

/// A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Playlist {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<PlaylistStatus>,
    /// Localizations for different languages
    #[serde(rename = "localizations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localizations: Option<HashMap<String, PlaylistLocalization>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "player")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub player: Option<PlaylistPlayer>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<PlaylistSnippet>,
    /// The ID that YouTube uses to uniquely identify the playlist.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<PlaylistContentDetails>,
}

/// A *liveChatMessage* resource represents a chat message in a YouTube Live Chat.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessage {
    /// The ID that YouTube assigns to uniquely identify the message.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<LiveChatMessageSnippet>,
    #[serde(rename = "authorDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author_details: Option<LiveChatMessageAuthorDetails>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LocalizedString {
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "language")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentListResponse {
    /// A list of comments that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Comment>>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#commentListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionSubscriberSnippet {
    /// The description of the subscriber.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The title of the subscriber.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// The channel ID of the subscriber.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
}

/// Internal representation of thumbnails for a YouTube resource.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThumbnailDetails {
    #[serde(rename = "medium")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub medium: Option<Thumbnail>,
    #[serde(rename = "high")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub high: Option<Thumbnail>,
    #[serde(rename = "default")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default: Option<Thumbnail>,
    #[serde(rename = "standard")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub standard: Option<Thumbnail>,
    #[serde(rename = "maxres")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub maxres: Option<Thumbnail>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityListResponse {
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Activity>>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#activityListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
}

/// Live broadcast state.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastStatus {
    /// This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
    #[serde(rename = "selfDeclaredMadeForKids")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub self_declared_made_for_kids: Option<bool>,
    /// Priority of the live broadcast event (internal state).
    #[serde(rename = "liveBroadcastPriority")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_broadcast_priority: Option<String>,
    /// The broadcast's recording status.
    #[serde(rename = "recordingStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recording_status: Option<String>,
    /// The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
    #[serde(rename = "lifeCycleStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub life_cycle_status: Option<String>,
    /// Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
    #[serde(rename = "madeForKids")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub made_for_kids: Option<bool>,
    /// The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
    #[serde(rename = "privacyStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub privacy_status: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastListResponse {
    /// A list of broadcasts that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<LiveBroadcast>>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcastListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
}

/// A pair Property / Value.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PropertyValue {
    /// A property.
    #[serde(rename = "property")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<String>,
    /// The property's value.
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatModeratorSnippet {
    /// The ID of the live chat this moderator can act on.
    #[serde(rename = "liveChatId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_chat_id: Option<String>,
    #[serde(rename = "moderatorDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moderator_details: Option<ChannelProfileDetails>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TestItemTestItemSnippet {}

/// Statistics about the video, such as the number of times the video was viewed or liked.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoStatistics {
    /// u64: The number of users who currently have the video marked as a favorite video.
    #[serde(rename = "favoriteCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub favorite_count: Option<String>,
    /// u64: The number of users who have indicated that they disliked the video by giving it a negative rating.
    #[serde(rename = "dislikeCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dislike_count: Option<String>,
    /// u64: The number of comments for the video.
    #[serde(rename = "commentCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment_count: Option<String>,
    /// u64: The number of times the video has been viewed.
    #[serde(rename = "viewCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub view_count: Option<String>,
    /// u64: The number of users who have indicated that they liked the video by giving it a positive rating.
    #[serde(rename = "likeCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub like_count: Option<String>,
}

/// A thumbnail is an image representing a YouTube resource.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Thumbnail {
    /// (Optional) Width of the thumbnail image.
    #[serde(rename = "width")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub width: Option<u32>,
    /// (Optional) Height of the thumbnail image.
    #[serde(rename = "height")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub height: Option<u32>,
    /// The thumbnail image's URL.
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsDetails {
    /// Id of the highest level that the user has access to at the moment.
    #[serde(rename = "highestAccessibleLevel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub highest_accessible_level: Option<String>,
    /// Data about memberships duration on particular pricing levels.
    #[serde(rename = "membershipsDurationAtLevels")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memberships_duration_at_levels: Option<Vec<MembershipsDurationAtLevel>>,
    /// Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
    #[serde(rename = "accessibleLevels")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accessible_levels: Option<Vec<String>>,
    /// Display name for the highest level that the user has access to at the moment.
    #[serde(rename = "highestAccessibleLevelDisplayName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub highest_accessible_level_display_name: Option<String>,
    #[serde(rename = "membershipsDuration")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memberships_duration: Option<MembershipsDuration>,
}

/// ChannelSection targeting setting.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionTargeting {
    /// The language the channel section is targeting.
    #[serde(rename = "languages")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<String>>,
    /// The country the channel section is targeting.
    #[serde(rename = "countries")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub countries: Option<Vec<String>>,
    /// The region the channel section is targeting.
    #[serde(rename = "regions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub regions: Option<Vec<String>>,
}

/// A *third party account link* resource represents a link between a YouTube account or a channel and an account on a third-party service.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLink {
    /// The linking_token identifies a YouTube account and channel with which the third party account is linked.
    #[serde(rename = "linkingToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub linking_token: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<ThirdPartyLinkSnippet>,
    /// Etag of this resource
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<ThirdPartyLinkStatus>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLink".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// Comments written in (direct or indirect) reply to the top level comment.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThreadReplies {
    /// A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
    #[serde(rename = "comments")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<Vec<Comment>>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatSuperStickerDetails {
    /// u64: The amount purchased by the user, in micros (1,750,000 micros = 1.75).
    #[serde(rename = "amountMicros")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_micros: Option<String>,
    /// The currency in which the purchase was made.
    #[serde(rename = "currency")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "superStickerMetadata")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub super_sticker_metadata: Option<SuperStickerMetadata>,
    /// A rendered string that displays the fund amount and currency to the user.
    #[serde(rename = "amountDisplayString")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_display_string: Option<String>,
    /// The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
    #[serde(rename = "tier")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tier: Option<u32>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TestItem {
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<TestItemTestItemSnippet>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// i64:
    #[serde(rename = "gaia")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gaia: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MemberSnippet {
    #[serde(rename = "memberDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member_details: Option<ChannelProfileDetails>,
    #[serde(rename = "membershipsDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memberships_details: Option<MembershipsDetails>,
    /// The id of the channel that's offering memberships.
    #[serde(rename = "creatorChannelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creator_channel_id: Option<String>,
}

/// Basic details about an i18n region, such as region code and human-readable name.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nRegionSnippet {
    /// The region code as a 2-letter ISO country code.
    #[serde(rename = "gl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gl: Option<String>,
    /// The human-readable name of the region.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LevelDetails {
    /// The name that should be used when referring to this level.
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
}

/// Basic details about a channel, including title, description and thumbnails.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSnippet {
    /// The country of the channel.
    #[serde(rename = "country")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The date and time that the channel was created. The value is specified in < a href="//www.w3.org/TR/NOTE-datetime">ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// The language of the channel's default title and description.
    #[serde(rename = "defaultLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// The custom url of the channel.
    #[serde(rename = "customUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custom_url: Option<String>,
    /// The channel's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "localized")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localized: Option<ChannelLocalization>,
    /// The description of the channel.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionListResponse {
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// A list of subscriptions that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Subscription>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#subscriptionListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistContentDetails {
    /// The number of videos in the playlist.
    #[serde(rename = "itemCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub item_count: Option<u32>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatTextMessageDetails {
    /// The user's message.
    #[serde(rename = "messageText")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message_text: Option<String>,
}

/// Describes a temporal position of a visual widget inside a video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvideoTiming {
    /// u64: Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
    #[serde(rename = "durationMs")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration_ms: Option<String>,
    /// u64: Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
    #[serde(rename = "offsetMs")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offset_ms: Option<String>,
    /// Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
}

/// Details about the content of a YouTube Video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoContentDetails {
    /// The value of captions indicates whether the video has captions or not.
    #[serde(rename = "caption")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub caption: Option<String>,
    /// The value of is_license_content indicates whether the video is licensed content.
    #[serde(rename = "licensedContent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub licensed_content: Option<bool>,
    /// Specifies the projection format of the video.
    #[serde(rename = "projection")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub projection: Option<String>,
    /// The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
    #[serde(rename = "duration")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
    #[serde(rename = "hasCustomThumbnail")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub has_custom_thumbnail: Option<bool>,
    #[serde(rename = "countryRestriction")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country_restriction: Option<AccessPolicy>,
    /// The value of definition indicates whether the video is available in high definition or only in standard definition.
    #[serde(rename = "definition")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub definition: Option<String>,
    #[serde(rename = "regionRestriction")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub region_restriction: Option<VideoContentDetailsRegionRestriction>,
    #[serde(rename = "contentRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_rating: Option<ContentRating>,
    /// The value of dimension indicates whether the video is available in 3D or in 2D.
    #[serde(rename = "dimension")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dimension: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoRatingListResponse {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// A list of ratings that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<VideoRating>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoGetRatingResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAbuseReport {
    /// The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
    #[serde(rename = "reasonId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason_id: Option<String>,
    /// The language that the content was viewed in.
    #[serde(rename = "language")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// Additional comments regarding the abuse report.
    #[serde(rename = "comments")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The ID that YouTube uses to uniquely identify the video.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
    /// The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
    #[serde(rename = "secondaryReasonId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub secondary_reason_id: Option<String>,
}

/// A *channel* resource contains information about a YouTube channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Channel {
    #[serde(rename = "topicDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_details: Option<ChannelTopicDetails>,
    /// The ID that YouTube uses to uniquely identify the channel.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "contentOwnerDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_owner_details: Option<ChannelContentOwnerDetails>,
    #[serde(rename = "statistics")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub statistics: Option<ChannelStatistics>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "auditDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audit_details: Option<ChannelAuditDetails>,
    #[serde(rename = "brandingSettings")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub branding_settings: Option<ChannelBrandingSettings>,
    #[serde(rename = "conversionPings")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub conversion_pings: Option<ChannelConversionPings>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<ChannelSnippet>,
    /// Localizations for different languages
    #[serde(rename = "localizations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localizations: Option<HashMap<String, ChannelLocalization>>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<ChannelContentDetails>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<ChannelStatus>,
}

/// Geographical coordinates of a point, in WGS84.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct GeoPoint {
    /// Altitude above the reference ellipsoid, in meters.
    #[serde(rename = "altitude")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub altitude: Option<f64>,
    /// Latitude in degrees.
    #[serde(rename = "latitude")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,
    /// Longitude in degrees.
    #[serde(rename = "longitude")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatBanSnippet {
    /// The type of ban.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    /// The chat this ban is pertinent to.
    #[serde(rename = "liveChatId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_chat_id: Option<String>,
    /// u64: The duration of a ban, only filled if the ban has type TEMPORARY.
    #[serde(rename = "banDurationSeconds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ban_duration_seconds: Option<String>,
    #[serde(rename = "bannedUserDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banned_user_details: Option<ChannelProfileDetails>,
}

/// ChannelSection localization setting
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionLocalization {
    /// The localized strings for channel section's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Basic information about a third party account link, including its type and type-specific information.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLinkSnippet {
    /// Type of the link named after the entities that are being linked.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    #[serde(rename = "channelToStoreLink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_to_store_link: Option<ChannelToStoreLinkDetails>,
}

/// Information about a resource that received a positive (like) rating.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsLike {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
}

/// Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivitySnippet {
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
    #[serde(rename = "groupId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The type of activity that the resource describes.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    /// The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The title of the resource primarily associated with the activity.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The ID that YouTube uses to uniquely identify the channel associated with the activity.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The date and time that the video was uploaded. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    /// Channel title for the channel responsible for this activity
    #[serde(rename = "channelTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_title: Option<String>,
}

/// A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcast {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "statistics")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub statistics: Option<LiveBroadcastStatistics>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<LiveBroadcastStatus>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The ID that YouTube assigns to uniquely identify the broadcast.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<LiveBroadcastContentDetails>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<LiveBroadcastSnippet>,
}

/// Playlist localization setting
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistLocalization {
    /// The localized strings for playlist's description.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The localized strings for playlist's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistListResponse {
    /// A list of playlists that match the request criteria
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Playlist>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

/// A live stream describes a live ingestion point.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStream {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The ID that YouTube assigns to uniquely identify the stream.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "cdn")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cdn: Option<CdnSettings>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<LiveStreamStatus>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<LiveStreamSnippet>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<LiveStreamContentDetails>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAbuseReportSecondaryReason {
    /// The ID of this abuse report secondary reason.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The localized label for this abuse report secondary reason.
    #[serde(rename = "label")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsDurationAtLevel {
    /// The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer).
    #[serde(rename = "memberTotalDurationMonths")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member_total_duration_months: Option<i32>,
    /// Pricing level ID.
    #[serde(rename = "level")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// The date and time when the user became a continuous member for the given level.
    #[serde(rename = "memberSince")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member_since: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelContentDetailsRelatedPlaylists {
    /// The ID of the playlist that contains the channel"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
    #[serde(rename = "watchHistory")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub watch_history: Option<String>,
    /// The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
    #[serde(rename = "watchLater")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub watch_later: Option<String>,
    /// The ID of the playlist that contains the channel"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
    #[serde(rename = "uploads")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uploads: Option<String>,
    /// The ID of the playlist that contains the channel"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
    #[serde(rename = "favorites")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub favorites: Option<String>,
    /// The ID of the playlist that contains the channel"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
    #[serde(rename = "likes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub likes: Option<String>,
}

/// Details about the content of a channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelContentDetails {
    #[serde(rename = "relatedPlaylists")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub related_playlists: Option<ChannelContentDetailsRelatedPlaylists>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemListResponse {
    /// A list of playlist items that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<PlaylistItem>>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItemListResponse". Etag of this resource.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
}

/// Information about a resource that received a comment.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsComment {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
}

/// Details about monetization of a YouTube Video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoMonetizationDetails {
    #[serde(rename = "access")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub access: Option<AccessPolicy>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LocalizedProperty {
    #[serde(rename = "defaultLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_language: Option<LanguageTag>,
    #[serde(rename = "default")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default: Option<String>,
    #[serde(rename = "localized")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localized: Option<Vec<LocalizedString>>,
}

/// A *comment* represents a single YouTube comment.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Comment {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The ID that YouTube uses to uniquely identify the comment.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<CommentSnippet>,
}

/// Rights management policy for YouTube resources.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AccessPolicy {
    /// A list of region codes that identify countries where the default policy do not apply.
    #[serde(rename = "exception")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub exception: Option<Vec<String>>,
    /// The value of allowed indicates whether the access to the policy is allowed or denied by default.
    #[serde(rename = "allowed")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allowed: Option<bool>,
}

/// A *videoCategory* resource identifies a category that has been or could be associated with uploaded videos.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoCategory {
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<VideoCategorySnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategory".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The ID that YouTube uses to uniquely identify the video category.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nLanguageListResponse {
    /// A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<I18nLanguage>>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguageListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

/// Branding properties of a YouTube channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelBrandingSettings {
    #[serde(rename = "channel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel: Option<ChannelSettings>,
    /// Additional experimental branding properties.
    #[serde(rename = "hints")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hints: Option<Vec<PropertyValue>>,
    #[serde(rename = "image")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image: Option<ImageSettings>,
    #[serde(rename = "watch")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub watch: Option<WatchSettings>,
}

/// Details about the live streaming metadata.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoLiveStreamingDetails {
    /// The time that the broadcast is scheduled to begin. The value is specified in ISO 8601 format.
    #[serde(rename = "scheduledStartTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_start_time: Option<String>,
    /// The time that the broadcast is scheduled to end. The value is specified in ISO 8601 format. If the value is empty or the property is not present, then the broadcast is scheduled to continue indefinitely.
    #[serde(rename = "scheduledEndTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheduled_end_time: Option<String>,
    /// The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
    #[serde(rename = "activeLiveChatId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub active_live_chat_id: Option<String>,
    /// u64: The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
    #[serde(rename = "concurrentViewers")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub concurrent_viewers: Option<String>,
    /// The time that the broadcast actually ended. The value is specified in ISO 8601 format. This value will not be available until the broadcast is over.
    #[serde(rename = "actualEndTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual_end_time: Option<String>,
    /// The time that the broadcast actually started. The value is specified in ISO 8601 format. This value will not be available until the broadcast begins.
    #[serde(rename = "actualStartTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub actual_start_time: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatFanFundingEventDetails {
    /// The comment added by the user to this fan funding event.
    #[serde(rename = "userComment")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_comment: Option<String>,
    /// A rendered string that displays the fund amount and currency to the user.
    #[serde(rename = "amountDisplayString")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_display_string: Option<String>,
    /// u64: The amount of the fund.
    #[serde(rename = "amountMicros")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_micros: Option<String>,
    /// The currency in which the fund was made.
    #[serde(rename = "currency")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
}

/// A *caption* resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Caption {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The ID that YouTube uses to uniquely identify the caption track.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<CaptionSnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// Information about a channel that a user subscribed to.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsSubscription {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
}

/// The third-party link status object contains information about the status of the link.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLinkStatus {
    #[serde(rename = "linkStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link_status: Option<String>,
}

/// Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SearchResultSnippet {
    /// It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
    #[serde(rename = "liveBroadcastContent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_broadcast_content: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// A description of the search result.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The title of the channel that published the resource that the search result identifies.
    #[serde(rename = "channelTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_title: Option<String>,
    /// The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The title of the search result.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The creation date and time of the resource that the search result identifies. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
}

/// Branding properties for the channel view.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSettings {
    /// The ID for a Google Analytics account to track and measure traffic to the channels.
    #[serde(rename = "trackingAnalyticsAccountId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tracking_analytics_account_id: Option<String>,
    #[serde(rename = "defaultLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    /// Specifies the channel description.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies the channel title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Lists keywords associated with the channel, comma-separated.
    #[serde(rename = "keywords")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub keywords: Option<String>,
    /// A prominent color that can be rendered on this channel page.
    #[serde(rename = "profileColor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile_color: Option<String>,
    /// Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
    #[serde(rename = "moderateComments")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moderate_comments: Option<bool>,
    /// Title for the featured channels tab.
    #[serde(rename = "featuredChannelsTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub featured_channels_title: Option<String>,
    /// Whether related channels should be proposed.
    #[serde(rename = "showRelatedChannels")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub show_related_channels: Option<bool>,
    /// The trailer of the channel, for users that are not subscribers.
    #[serde(rename = "unsubscribedTrailer")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unsubscribed_trailer: Option<String>,
    /// Which content tab users should see when viewing the channel.
    #[serde(rename = "defaultTab")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_tab: Option<String>,
    /// The list of featured channels.
    #[serde(rename = "featuredChannelsUrls")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub featured_channels_urls: Option<Vec<String>>,
    /// The country of the channel.
    #[serde(rename = "country")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Whether the tab to browse the videos should be displayed.
    #[serde(rename = "showBrowseView")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub show_browse_view: Option<bool>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoCategoryListResponse {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategoryListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<VideoCategory>>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAbuseReportReasonListResponse {
    /// Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReasonListResponse"`.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// A list of valid abuse reasons that are used with `video.ReportAbuse`.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<VideoAbuseReportReason>>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The `visitorId` identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
}

/// Channel localization setting
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelLocalization {
    /// The localized strings for channel's description.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The localized strings for channel's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoListResponse {
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#videoListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Video>>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamHealthStatus {
    /// u64: The last time this status was updated (in seconds)
    #[serde(rename = "lastUpdateTimeSeconds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_update_time_seconds: Option<String>,
    /// The status code of this stream
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The configurations issues on this stream
    #[serde(rename = "configurationIssues")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub configuration_issues: Option<Vec<LiveStreamConfigurationIssue>>,
}

/// Detailed settings of a stream.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamContentDetails {
    /// The ingestion URL where the closed captions of this stream are sent.
    #[serde(rename = "closedCaptionsIngestionUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub closed_captions_ingestion_url: Option<String>,
    /// Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream.
    #[serde(rename = "isReusable")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_reusable: Option<bool>,
}

/// Basic details about a subscription, including title, description and thumbnails of the subscribed item.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionSnippet {
    /// The ID that YouTube uses to uniquely identify the subscriber's channel.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// Channel title for the channel that the subscription belongs to.
    #[serde(rename = "channelTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_title: Option<String>,
    /// The subscription's details.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The subscription's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
    /// The date and time that the subscription was created. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
}

/// Project specific details about the content of a YouTube Video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoProjectDetails {
    /// A list of project tags associated with the video during the upload.
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SuperStickerMetadata {
    /// Specifies the localization language in which the alt text is returned.
    #[serde(rename = "altTextLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alt_text_language: Option<String>,
    /// Internationalized alt text that describes the sticker image and any animation associated with it.
    #[serde(rename = "altText")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alt_text: Option<String>,
    /// Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
    #[serde(rename = "stickerId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sticker_id: Option<String>,
}

/// An *i18nLanguage* resource identifies a UI language currently supported by YouTube.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nLanguage {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<I18nLanguageSnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguage".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The ID that YouTube uses to uniquely identify the i18n language.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvideoPosition {
    /// Describes in which corner of the video the visual widget will appear.
    #[serde(rename = "cornerPosition")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub corner_position: Option<String>,
    /// Defines the position type.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsLevelListResponse {
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// A list of pricing levels offered by a creator to the fans.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<MembershipsLevel>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

/// The id of the author's YouTube channel, if any.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentSnippetAuthorChannelId {
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Activity {
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<ActivitySnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#activity".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<ActivityContentDetails>,
    /// The ID that YouTube uses to uniquely identify the activity.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Etag of this resource
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SuperChatEventSnippet {
    /// u64: The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
    #[serde(rename = "amountMicros")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub amount_micros: Option<String>,
    /// The date and time when the event occurred. The value is specified in ISO 8601 format.
    #[serde(rename = "createdAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// A rendered string that displays the purchase amount and currency (e.g., "$1.00"). The string is rendered for the given language.
    #[serde(rename = "displayString")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display_string: Option<String>,
    /// The tier for the paid message, which is based on the amount of money spent to purchase the message.
    #[serde(rename = "messageType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message_type: Option<u32>,
    /// The text contents of the comment left by the user.
    #[serde(rename = "commentText")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment_text: Option<String>,
    /// True if this event is a Super Sticker event.
    #[serde(rename = "isSuperStickerEvent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_super_sticker_event: Option<bool>,
    #[serde(rename = "superStickerMetadata")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub super_sticker_metadata: Option<SuperStickerMetadata>,
    /// Channel id where the event occurred.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    #[serde(rename = "supporterDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub supporter_details: Option<ChannelProfileDetails>,
    /// The currency in which the purchase was made. ISO 4217.
    #[serde(rename = "currency")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
}

/// DEPRECATED Region restriction of the video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoContentDetailsRegionRestriction {
    /// A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
    #[serde(rename = "blocked")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub blocked: Option<Vec<String>>,
    /// A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
    #[serde(rename = "allowed")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allowed: Option<Vec<String>>,
}

/// Localized versions of certain video properties (e.g. title).
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoLocalization {
    /// Localized version of the video's description.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Localized version of the video's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct RelatedEntity {
    #[serde(rename = "entity")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub entity: Option<Entity>,
}

/// Basic details about a video, including title, description, uploader, thumbnails and category.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoSnippet {
    /// The language of the videos's default snippet.
    #[serde(rename = "defaultLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    /// The video's description. @mutable youtube.videos.insert youtube.videos.update
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The default_audio_language property specifies the language spoken in the video's default audio track.
    #[serde(rename = "defaultAudioLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_audio_language: Option<String>,
    #[serde(rename = "localized")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localized: Option<VideoLocalization>,
    /// Channel title for the channel that the video belongs to.
    #[serde(rename = "channelTitle")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_title: Option<String>,
    /// The YouTube video category associated with the video.
    #[serde(rename = "categoryId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category_id: Option<String>,
    /// The video's title. @mutable youtube.videos.insert youtube.videos.update
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "thumbnails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub thumbnails: Option<ThumbnailDetails>,
    /// The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// A list of keyword tags associated with the video. Tags may contain spaces.
    #[serde(rename = "tags")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
    #[serde(rename = "liveBroadcastContent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_broadcast_content: Option<String>,
    /// The date and time that the video was uploaded. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsLevelSnippet {
    #[serde(rename = "levelDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub level_details: Option<LevelDetails>,
    /// The id of the channel that's offering channel memberships.
    #[serde(rename = "creatorChannelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creator_channel_id: Option<String>,
}

/// Basic details about a video category, such as its localized title.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAbuseReportReasonSnippet {
    /// The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
    #[serde(rename = "secondaryReasons")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub secondary_reasons: Option<Vec<VideoAbuseReportSecondaryReason>>,
    /// The localized label belonging to this abuse report reason.
    #[serde(rename = "label")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AbuseType {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Basic details about a video category, such as its localized title.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoCategorySnippet {
    /// The YouTube channel that created the video category.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The video category's title.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "assignable")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub assignable: Option<bool>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SearchListResponse {
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Pagination information for token pagination.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<SearchResult>>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "regionCode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub region_code: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatUserBannedMessageDetails {
    /// The type of ban.
    #[serde(rename = "banType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ban_type: Option<String>,
    #[serde(rename = "bannedUserDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banned_user_details: Option<ChannelProfileDetails>,
    /// u64: The duration of the ban. This property is only present if the banType is temporary.
    #[serde(rename = "banDurationSeconds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ban_duration_seconds: Option<String>,
}

/// A single tag suggestion with it's relevance information.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoSuggestionsTagSuggestion {
    /// The keyword tag suggested for the video.
    #[serde(rename = "tag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
    #[serde(rename = "categoryRestricts")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub category_restricts: Option<Vec<String>>,
}

/// The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelAuditDetails {
    /// Whether or not the channel has any copyright strikes.
    #[serde(rename = "copyrightStrikesGoodStanding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub copyright_strikes_good_standing: Option<bool>,
    /// Whether or not the channel has any unresolved claims.
    #[serde(rename = "contentIdClaimsGoodStanding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_id_claims_good_standing: Option<bool>,
    /// Whether or not the channel respects the community guidelines.
    #[serde(rename = "communityGuidelinesGoodStanding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub community_guidelines_good_standing: Option<bool>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelProfileDetails {
    /// The YouTube channel ID.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The channels's avatar URL.
    #[serde(rename = "profileImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile_image_url: Option<String>,
    /// The channel's display name.
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The channel's URL.
    #[serde(rename = "channelUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_url: Option<String>,
}

/// Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastStatistics {
    /// u64: The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast.
    #[serde(rename = "totalChatCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_chat_count: Option<String>,
}

/// A `__sponsor__` resource represents a sponsor for a YouTube channel. A sponsor provides recurring monetary support to a creator and receives special benefits.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Sponsor {
    /// Identifies what kind of resource this is. Value: the fixed string `"youtube#sponsor"`.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<SponsorSnippet>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamConfigurationIssue {
    /// The long-form description of the issue and how to resolve it.
    #[serde(rename = "description")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The short-form reason for this issue.
    #[serde(rename = "reason")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The kind of error happening.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    /// How severe this issue is to the stream.
    #[serde(rename = "severity")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
}

/// Basic details about a caption track, such as its language and name.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionSnippet {
    /// Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
    #[serde(rename = "isAutoSynced")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_auto_synced: Option<bool>,
    /// Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
    #[serde(rename = "isCC")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_c_c: Option<bool>,
    /// Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
    #[serde(rename = "isDraft")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_draft: Option<bool>,
    /// The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
    #[serde(rename = "failureReason")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// The caption track's status.
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
    #[serde(rename = "isLarge")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_large: Option<bool>,
    /// The date and time when the caption track was last updated. The value is specified in ISO 8601 format.
    #[serde(rename = "lastUpdated")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
    /// The type of audio track associated with the caption track.
    #[serde(rename = "audioTrackType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio_track_type: Option<String>,
    /// The language of the caption track. The property value is a BCP-47 language tag.
    #[serde(rename = "language")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// The name of the caption track. The name is intended to be visible to the user as an option during playback.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
    /// The caption track's type.
    #[serde(rename = "trackKind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub track_kind: Option<String>,
    /// Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
    #[serde(rename = "isEasyReader")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_easy_reader: Option<bool>,
}

/// Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PageInfo {
    /// The total number of results in the result set.
    #[serde(rename = "totalResults")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_results: Option<i32>,
    /// The number of results included in the API response.
    #[serde(rename = "resultsPerPage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub results_per_page: Option<i32>,
}

/// Basic details about a comment thread.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThreadSnippet {
    /// The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
    /// The total number of replies (not including the top level comment).
    #[serde(rename = "totalReplyCount")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub total_reply_count: Option<u32>,
    /// The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// Whether the thread (and therefore all its comments) is visible to all YouTube users.
    #[serde(rename = "isPublic")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    /// Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
    #[serde(rename = "canReply")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub can_reply: Option<bool>,
    #[serde(rename = "topLevelComment")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub top_level_comment: Option<Comment>,
}

/// Player to be used for a video playback.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoPlayer {
    /// An <iframe> tag that embeds a player that will play the video.
    #[serde(rename = "embedHtml")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embed_html: Option<String>,
    /// i64:
    #[serde(rename = "embedHeight")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embed_height: Option<String>,
    /// i64: The embed width
    #[serde(rename = "embedWidth")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embed_width: Option<String>,
}

/// Information about a video stream.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoFileDetailsVideoStream {
    /// The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
    #[serde(rename = "widthPixels")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub width_pixels: Option<u32>,
    /// The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
    #[serde(rename = "aspectRatio")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub aspect_ratio: Option<f64>,
    /// u64: The video stream's bitrate, in bits per second.
    #[serde(rename = "bitrateBps")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bitrate_bps: Option<String>,
    /// The video codec that the stream uses.
    #[serde(rename = "codec")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub codec: Option<String>,
    /// The video stream's frame rate, in frames per second.
    #[serde(rename = "frameRateFps")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frame_rate_fps: Option<f64>,
    /// A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
    #[serde(rename = "vendor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vendor: Option<String>,
    /// The amount that YouTube needs to rotate the original source content to properly display the video.
    #[serde(rename = "rotation")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rotation: Option<String>,
    /// The encoded video content's height in pixels.
    #[serde(rename = "heightPixels")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub height_pixels: Option<u32>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SponsorSnippet {
    #[serde(rename = "sponsorDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sponsor_details: Option<ChannelProfileDetails>,
    /// The cumulative time a user has been a sponsor in months.
    #[serde(rename = "cumulativeDurationMonths")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cumulative_duration_months: Option<i32>,
    /// The id of the channel being sponsored.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The date and time when the user became a sponsor. The value is specified in ISO 8601 (`YYYY-MM-DDThh:mm:ss.sZ`) format.
    #[serde(rename = "sponsorSince")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sponsor_since: Option<String>,
}

/// Information about a new playlist item.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsPlaylistItem {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
    /// ID of the item within the playlist.
    #[serde(rename = "playlistItemId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub playlist_item_id: Option<String>,
    /// The value that YouTube uses to uniquely identify the playlist.
    #[serde(rename = "playlistId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub playlist_id: Option<String>,
}

/// A *comment thread* represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThread {
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<CommentThreadSnippet>,
    /// The ID that YouTube uses to uniquely identify the comment thread.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "replies")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub replies: Option<CommentThreadReplies>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

/// Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ContentRating {
    /// The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.
    #[serde(rename = "csaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub csa_rating: Option<String>,
    /// The video's Motion Picture Association of America (MPAA) rating.
    #[serde(rename = "mpaaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mpaa_rating: Option<String>,
    /// The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
    #[serde(rename = "bmukkRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bmukk_rating: Option<String>,
    /// The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
    #[serde(rename = "cscfRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cscf_rating: Option<String>,
    /// The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
    #[serde(rename = "menaMpaaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mena_mpaa_rating: Option<String>,
    /// The video's rating in Peru.
    #[serde(rename = "pefilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pefilm_rating: Option<String>,
    /// The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
    #[serde(rename = "rcnofRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rcnof_rating: Option<String>,
    /// The video's Ministerio de Cultura (Colombia) rating.
    #[serde(rename = "mocRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moc_rating: Option<String>,
    /// The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
    #[serde(rename = "mpaatRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mpaat_rating: Option<String>,
    /// The video's rating system for Vietnam - MCST
    #[serde(rename = "mcstRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mcst_rating: Option<String>,
    /// Reasons that explain why the video received its DJCQT (Brazil) rating.
    #[serde(rename = "djctqRatingReasons")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub djctq_rating_reasons: Option<Vec<String>>,
    /// The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
    #[serde(rename = "fcoRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fco_rating: Option<String>,
    /// Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
    #[serde(rename = "catvRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catv_rating: Option<String>,
    /// Rating system in France - Commission de classification cinematographique
    #[serde(rename = "cncRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cnc_rating: Option<String>,
    /// The video's rating from the Bulgarian National Film Center.
    #[serde(rename = "nfrcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nfrc_rating: Option<String>,
    /// The video's rating from the Commission de Contrôle des Films (Belgium).
    #[serde(rename = "cicfRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cicf_rating: Option<String>,
    /// The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
    #[serde(rename = "mdaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mda_rating: Option<String>,
    /// The video's rating from Statens medieråd (Sweden's National Media Council).
    #[serde(rename = "smsaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub smsa_rating: Option<String>,
    /// The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
    #[serde(rename = "catvfrRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub catvfr_rating: Option<String>,
    /// The video's TV Parental Guidelines (TVPG) rating.
    #[serde(rename = "tvpgRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tvpg_rating: Option<String>,
    /// This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
    #[serde(rename = "fmocRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fmoc_rating: Option<String>,
    /// The video's rating in Greece.
    #[serde(rename = "grfilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub grfilm_rating: Option<String>,
    /// The video's rating in Slovakia.
    #[serde(rename = "skfilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub skfilm_rating: Option<String>,
    /// The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
    #[serde(rename = "incaaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub incaa_rating: Option<String>,
    /// The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
    #[serde(rename = "rtcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rtc_rating: Option<String>,
    /// The video's rating from Malaysia's Film Censorship Board.
    #[serde(rename = "fcbmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fcbm_rating: Option<String>,
    /// The video's Central Board of Film Certification (CBFC - India) rating.
    #[serde(rename = "cbfcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cbfc_rating: Option<String>,
    /// The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
    #[serde(rename = "ifcoRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ifco_rating: Option<String>,
    /// The video's rating in Venezuela.
    #[serde(rename = "resorteviolenciaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resorteviolencia_rating: Option<String>,
    /// The video's rating in Iceland.
    #[serde(rename = "smaisRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub smais_rating: Option<String>,
    /// The video's Canadian Home Video Rating System (CHVRS) rating.
    #[serde(rename = "chvrsRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub chvrs_rating: Option<String>,
    /// The National Media Council ratings system for United Arab Emirates.
    #[serde(rename = "nmcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nmc_rating: Option<String>,
    /// The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
    #[serde(rename = "djctqRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub djctq_rating: Option<String>,
    /// The video's rating in the Czech Republic.
    #[serde(rename = "czfilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub czfilm_rating: Option<String>,
    /// The video's rating in Estonia.
    #[serde(rename = "eefilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub eefilm_rating: Option<String>,
    /// The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
    #[serde(rename = "anatelRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub anatel_rating: Option<String>,
    /// The video's rating from Portugal's Comissão de Classificação de Espect´culos.
    #[serde(rename = "cceRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cce_rating: Option<String>,
    /// Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
    #[serde(rename = "ecbmctRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ecbmct_rating: Option<String>,
    /// The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
    #[serde(rename = "oflcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub oflc_rating: Option<String>,
    /// A rating that YouTube uses to identify age-restricted content.
    #[serde(rename = "ytRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub yt_rating: Option<String>,
    /// The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
    #[serde(rename = "acbRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub acb_rating: Option<String>,
    /// The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
    #[serde(rename = "mccypRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mccyp_rating: Option<String>,
    /// The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
    #[serde(rename = "nkclvRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nkclv_rating: Option<String>,
    /// The video's rating from Taiwan's Ministry of Culture (文化部).
    #[serde(rename = "moctwRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moctw_rating: Option<String>,
    /// The video's rating from Ireland's Raidió Teilifís Éireann.
    #[serde(rename = "rteRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rte_rating: Option<String>,
    /// The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
    #[serde(rename = "kijkwijzerRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kijkwijzer_rating: Option<String>,
    /// The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
    #[serde(rename = "icaaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub icaa_rating: Option<String>,
    /// The video's rating from Nigeria's National Film and Video Censors Board.
    #[serde(rename = "nfvcbRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nfvcb_rating: Option<String>,
    /// The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
    #[serde(rename = "mekuRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub meku_rating: Option<String>,
    /// The video's Consejo de Calificación Cinematográfica (Chile) rating.
    #[serde(rename = "cccRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ccc_rating: Option<String>,
    /// The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
    #[serde(rename = "eirinRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub eirin_rating: Option<String>,
    /// The video's rating from Thailand's Board of Film and Video Censors.
    #[serde(rename = "bfvcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bfvc_rating: Option<String>,
    /// The video's British Board of Film Classification (BBFC) rating.
    #[serde(rename = "bbfcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bbfc_rating: Option<String>,
    /// The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
    #[serde(rename = "agcomRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub agcom_rating: Option<String>,
    /// The video's rating from Indonesia's Lembaga Sensor Film.
    #[serde(rename = "lsfRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lsf_rating: Option<String>,
    /// The video's rating from Malta's Film Age-Classification Board.
    #[serde(rename = "mccaaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mccaa_rating: Option<String>,
    /// The video's rating from South Africa's Film and Publication Board.
    #[serde(rename = "fpbRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fpb_rating: Option<String>,
    /// The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
    #[serde(rename = "fskRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fsk_rating: Option<String>,
    /// The video's rating from the Kenya Film Classification Board.
    #[serde(rename = "kfcbRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kfcb_rating: Option<String>,
    /// Reasons that explain why the video received its FPB (South Africa) rating.
    #[serde(rename = "fpbRatingReasons")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fpb_rating_reasons: Option<Vec<String>>,
    /// The video's rating in Poland.
    #[serde(rename = "nbcplRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nbcpl_rating: Option<String>,
    /// The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
    #[serde(rename = "cnaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cna_rating: Option<String>,
    /// The video's rating in Egypt.
    #[serde(rename = "egfilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub egfilm_rating: Option<String>,
    /// The video's rating from Medietilsynet, the Norwegian Media Authority.
    #[serde(rename = "medietilsynetRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub medietilsynet_rating: Option<String>,
    /// The video's rating in Switzerland.
    #[serde(rename = "chfilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub chfilm_rating: Option<String>,
    /// The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
    #[serde(rename = "kmrbRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kmrb_rating: Option<String>,
    /// The video's rating in Israel.
    #[serde(rename = "ilfilmRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ilfilm_rating: Option<String>,
    /// The video's rating from the Maldives National Bureau of Classification.
    #[serde(rename = "nbcRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub nbc_rating: Option<String>,
    /// The video's rating from the Movie and Television Review and Classification Board (Philippines).
    #[serde(rename = "mtrcbRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mtrcb_rating: Option<String>,
    /// The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
    #[serde(rename = "russiaRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub russia_rating: Option<String>,
    /// The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
    #[serde(rename = "mibacRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mibac_rating: Option<String>,
}

/// Brief description of the live stream cdn settings.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CdnSettings {
    /// The format of the video stream that you are sending to Youtube.
    #[serde(rename = "format")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// The frame rate of the inbound video data.
    #[serde(rename = "frameRate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub frame_rate: Option<String>,
    /// The resolution of the inbound video data.
    #[serde(rename = "resolution")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resolution: Option<String>,
    #[serde(rename = "ingestionInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingestion_info: Option<IngestionInfo>,
    ///  The method or protocol used to transmit the video stream.
    #[serde(rename = "ingestionType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ingestion_type: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSection {
    /// Localizations for different languages
    #[serde(rename = "localizations")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localizations: Option<HashMap<String, ChannelSectionLocalization>>,
    #[serde(rename = "targeting")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub targeting: Option<ChannelSectionTargeting>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<ChannelSectionSnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The ID that YouTube uses to uniquely identify the channel section.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<ChannelSectionContentDetails>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessageDeletedDetails {
    #[serde(rename = "deletedMessageId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted_message_id: Option<String>,
}

/// A resource id is a generic reference that points to another YouTube resource.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ResourceId {
    /// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
    #[serde(rename = "playlistId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub playlist_id: Option<String>,
    /// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
    #[serde(rename = "videoId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
    /// The type of the API resource.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Entity {
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "typeId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub type_id: Option<String>,
}

/// Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetails {
    #[serde(rename = "subscription")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subscription: Option<ActivityContentDetailsSubscription>,
    #[serde(rename = "favorite")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub favorite: Option<ActivityContentDetailsFavorite>,
    #[serde(rename = "promotedItem")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub promoted_item: Option<ActivityContentDetailsPromotedItem>,
    #[serde(rename = "social")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub social: Option<ActivityContentDetailsSocial>,
    #[serde(rename = "playlistItem")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub playlist_item: Option<ActivityContentDetailsPlaylistItem>,
    #[serde(rename = "upload")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload: Option<ActivityContentDetailsUpload>,
    #[serde(rename = "comment")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<ActivityContentDetailsComment>,
    #[serde(rename = "channelItem")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_item: Option<ActivityContentDetailsChannelItem>,
    #[serde(rename = "recommendation")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recommendation: Option<ActivityContentDetailsRecommendation>,
    #[serde(rename = "like")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub like: Option<ActivityContentDetailsLike>,
    #[serde(rename = "bulletin")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bulletin: Option<ActivityContentDetailsBulletin>,
}

/// A *liveChatModerator* resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatModerator {
    /// The ID that YouTube assigns to uniquely identify the moderator.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<LiveChatModeratorSnippet>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MemberListResponse {
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// A list of members that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<Member>>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#memberListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAgeGating {
    /// Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
    #[serde(rename = "restricted")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub restricted: Option<bool>,
    /// Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
    #[serde(rename = "alcoholContent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alcohol_content: Option<bool>,
    /// Video game rating, if any.
    #[serde(rename = "videoGameRating")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_game_rating: Option<String>,
}

/// LINT.IfChange Describes an invideo branding.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct InvideoBranding {
    /// The channel to which this branding links. If not present it defaults to the current channel.
    #[serde(rename = "targetChannelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub target_channel_id: Option<String>,
    #[serde(rename = "timing")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timing: Option<InvideoTiming>,
    /// The bytes the uploaded image. Only used in api to youtube communication.
    #[serde(rename = "imageBytes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image_bytes: Option<String>,
    /// The url of the uploaded image. Only used in apiary to api communication.
    #[serde(rename = "imageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "position")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub position: Option<InvideoPosition>,
}

/// A *member* resource represents a member for a YouTube channel. A member provides recurring monetary support to a creator and receives special benefits.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Member {
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#member".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<MemberSnippet>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

/// A `__superChatEvent__` resource represents a Super Chat purchase on a YouTube channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SuperChatEvent {
    /// Identifies what kind of resource this is. Value: the fixed string `"youtube#superChatEvent"`.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<SuperChatEventSnippet>,
    /// The ID that YouTube assigns to uniquely identify the Super Chat event.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessageAuthorDetails {
    /// Whether the author is the owner of the live chat.
    #[serde(rename = "isChatOwner")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_chat_owner: Option<bool>,
    /// Whether the author is a sponsor of the live chat.
    #[serde(rename = "isChatSponsor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_chat_sponsor: Option<bool>,
    /// Whether the author's identity has been verified by YouTube.
    #[serde(rename = "isVerified")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_verified: Option<bool>,
    /// The channel's display name.
    #[serde(rename = "displayName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The channel's URL.
    #[serde(rename = "channelUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_url: Option<String>,
    /// The YouTube channel ID.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The channels's avatar URL.
    #[serde(rename = "profileImageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub profile_image_url: Option<String>,
    /// Whether the author is a moderator of the live chat.
    #[serde(rename = "isChatModerator")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub is_chat_moderator: Option<bool>,
}

/// A `__liveChatBan__` resource represents a ban for a YouTube live chat.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatBan {
    /// The ID that YouTube assigns to uniquely identify the ban.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string `"youtube#liveChatBan"`.
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<LiveChatBanSnippet>,
}

/// Basic details about an i18n language, such as language code and human-readable name.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nLanguageSnippet {
    /// The human-readable name of the language in the language itself.
    #[serde(rename = "name")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A short BCP-47 code that uniquely identifies a language.
    #[serde(rename = "hl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hl: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessageSnippet {
    /// Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
    #[serde(rename = "displayMessage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display_message: Option<String>,
    /// The date and time when the message was orignally published. The value is specified in ISO 8601 format.
    #[serde(rename = "publishedAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    #[serde(rename = "userBannedDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_banned_details: Option<LiveChatUserBannedMessageDetails>,
    /// The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase
    #[serde(rename = "authorChannelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author_channel_id: Option<String>,
    /// The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    #[serde(rename = "messageDeletedDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message_deleted_details: Option<LiveChatMessageDeletedDetails>,
    #[serde(rename = "messageRetractedDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message_retracted_details: Option<LiveChatMessageRetractedDetails>,
    #[serde(rename = "liveChatId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub live_chat_id: Option<String>,
    #[serde(rename = "superChatDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub super_chat_details: Option<LiveChatSuperChatDetails>,
    #[serde(rename = "fanFundingEventDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fan_funding_event_details: Option<LiveChatFanFundingEventDetails>,
    #[serde(rename = "superStickerDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub super_sticker_details: Option<LiveChatSuperStickerDetails>,
    #[serde(rename = "textMessageDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text_message_details: Option<LiveChatTextMessageDetails>,
    /// Whether the message has display content that should be displayed to users.
    #[serde(rename = "hasDisplayContent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub has_display_content: Option<bool>,
}

/// A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItem {
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<PlaylistItemSnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "status")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<PlaylistItemStatus>,
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<PlaylistItemContentDetails>,
    /// The ID that YouTube uses to uniquely identify the playlist item.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Branding properties for the watch. All deprecated.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct WatchSettings {
    /// The text color for the video watch page's branded area.
    #[serde(rename = "backgroundColor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub background_color: Option<String>,
    /// An ID that uniquely identifies a playlist that displays next to the video player.
    #[serde(rename = "featuredPlaylistId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub featured_playlist_id: Option<String>,
    /// The background color for the video watch page's branded area.
    #[serde(rename = "textColor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub text_color: Option<String>,
}

/// Recording information associated with the video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoRecordingDetails {
    /// The text description of the location where the video was recorded.
    #[serde(rename = "locationDescription")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location_description: Option<String>,
    #[serde(rename = "location")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<GeoPoint>,
    /// The date and time when the video was recorded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
    #[serde(rename = "recordingDate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub recording_date: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nRegionListResponse {
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<I18nRegion>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegionListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatModeratorListResponse {
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
    #[serde(rename = "prevPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub prev_page_token: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModeratorListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// A list of moderators that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<LiveChatModerator>>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SuperChatEventListResponse {
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// A list of Super Chat purchases that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<SuperChatEvent>>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEventListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
}

/// Freebase topic information related to the video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoTopicDetails {
    /// A list of Wikipedia URLs that provide a high-level description of the video's content.
    #[serde(rename = "topicCategories")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_categories: Option<Vec<String>>,
    /// Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
    #[serde(rename = "relevantTopicIds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub relevant_topic_ids: Option<Vec<String>>,
    /// A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API.
    #[serde(rename = "topicIds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub topic_ids: Option<Vec<String>>,
}

/// Details about a resource which was added to a channel.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsChannelItem {
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
}

/// Details about a social network post.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivityContentDetailsSocial {
    /// The URL of the social network post.
    #[serde(rename = "referenceUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reference_url: Option<String>,
    /// The author of the social network post.
    #[serde(rename = "author")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    /// The name of the social network.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    #[serde(rename = "resourceId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<ResourceId>,
    /// An image of the post's author.
    #[serde(rename = "imageUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
}

/// Video processing progress and completion time estimate.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoProcessingDetailsProcessingProgress {
    /// u64: An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
    #[serde(rename = "timeLeftMs")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub time_left_ms: Option<String>,
    /// u64: An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
    #[serde(rename = "partsTotal")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parts_total: Option<String>,
    /// u64: The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
    #[serde(rename = "partsProcessed")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parts_processed: Option<String>,
}

/// Information about the playlist item's privacy status.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemStatus {
    /// This resource's privacy status.
    #[serde(rename = "privacyStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub privacy_status: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistStatus {
    /// The playlist's privacy status.
    #[serde(rename = "privacyStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub privacy_status: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionListResponse {
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelSectionListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// A list of ChannelSections that match the request criteria.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<ChannelSection>>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
}

/// A channel banner returned as the response to a channel_banner.insert call.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelBannerResource {
    /// The URL of this banner image.
    #[serde(rename = "url")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThumbnailSetResponse {
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#thumbnailSetResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// A list of thumbnails.
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<ThumbnailDetails>>,
}

/// A *i18nRegion* resource identifies a region where YouTube is available.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nRegion {
    /// The ID that YouTube uses to uniquely identify the i18n region.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<I18nRegionSnippet>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegion".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
}

/// Basic details about a video category, such as its localized title. Next Id: 17
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoStatus {
    /// The video's privacy status.
    #[serde(rename = "privacyStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub privacy_status: Option<String>,
    /// This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
    #[serde(rename = "embeddable")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embeddable: Option<bool>,
    /// This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
    #[serde(rename = "failureReason")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// The status of the uploaded video.
    #[serde(rename = "uploadStatus")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_status: Option<String>,
    /// This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
    #[serde(rename = "rejectionReason")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rejection_reason: Option<String>,
    /// The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private. The value is specified in ISO 8601 format.
    #[serde(rename = "publishAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub publish_at: Option<String>,
    #[serde(rename = "madeForKids")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub made_for_kids: Option<bool>,
    #[serde(rename = "selfDeclaredMadeForKids")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub self_declared_made_for_kids: Option<bool>,
    /// This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
    #[serde(rename = "publicStatsViewable")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub public_stats_viewable: Option<bool>,
    /// The video's license. @mutable youtube.videos.insert youtube.videos.update
    #[serde(rename = "license")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
}

/// Detailed settings of a broadcast.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastContentDetails {
    /// This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
    #[serde(rename = "enableDvr")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_dvr: Option<bool>,
    #[serde(rename = "monitorStream")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub monitor_stream: Option<MonitorStreamInfo>,
    /// The date and time that the live stream referenced by boundStreamId was last updated.
    #[serde(rename = "boundStreamLastUpdateTimeMs")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bound_stream_last_update_time_ms: Option<String>,
    /// This value uniquely identifies the live stream bound to the broadcast.
    #[serde(rename = "boundStreamId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bound_stream_id: Option<String>,
    /// This setting indicates whether YouTube should enable content encryption for the broadcast.
    #[serde(rename = "enableContentEncryption")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_content_encryption: Option<bool>,
    /// Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
    #[serde(rename = "recordFromStart")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub record_from_start: Option<bool>,
    /// This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
    #[serde(rename = "startWithSlate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub start_with_slate: Option<bool>,
    #[serde(rename = "closedCaptionsType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub closed_captions_type: Option<String>,
    /// If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
    #[serde(rename = "latencyPreference")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub latency_preference: Option<String>,
    /// This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
    #[serde(rename = "enableAutoStop")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_auto_stop: Option<bool>,
    /// Indicates whether this broadcast has low latency enabled.
    #[serde(rename = "enableLowLatency")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_low_latency: Option<bool>,
    /// The projection format of this broadcast. This defaults to rectangular.
    #[serde(rename = "projection")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub projection: Option<String>,
    /// This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
    #[serde(rename = "enableClosedCaptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_closed_captions: Option<bool>,
    /// The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
    #[serde(rename = "mesh")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mesh: Option<String>,
    /// This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
    #[serde(rename = "enableEmbed")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_embed: Option<bool>,
    /// This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
    #[serde(rename = "enableAutoStart")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_auto_start: Option<bool>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LanguageTag {
    #[serde(rename = "value")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessageListResponse {
    #[serde(rename = "tokenPagination")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub token_pagination: Option<TokenPagination>,
    #[serde(rename = "nextPageToken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub next_page_token: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The visitorId identifies the visitor.
    #[serde(rename = "visitorId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visitor_id: Option<String>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The amount of time the client should wait before polling again.
    #[serde(rename = "pollingIntervalMillis")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub polling_interval_millis: Option<u32>,
    #[serde(rename = "items")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<LiveChatMessage>>,
    /// Serialized EventId of the request which produced this response.
    #[serde(rename = "eventId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The date and time when the underlying stream went offline. The value is specified in ISO 8601 format.
    #[serde(rename = "offlineAt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offline_at: Option<String>,
    #[serde(rename = "pageInfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_info: Option<PageInfo>,
}

/// Settings and Info of the monitor stream
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MonitorStreamInfo {
    /// If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
    #[serde(rename = "broadcastStreamDelayMs")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub broadcast_stream_delay_ms: Option<u32>,
    /// HTML code that embeds a player that plays the monitor stream.
    #[serde(rename = "embedHtml")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embed_html: Option<String>,
    /// This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
    #[serde(rename = "enableMonitorStream")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub enable_monitor_stream: Option<bool>,
}

/// Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelConversionPing {
    /// Defines the context of the ping.
    #[serde(rename = "context")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
    #[serde(rename = "conversionUrl")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub conversion_url: Option<String>,
}

/// Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoFileDetails {
    /// u64: The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
    #[serde(rename = "fileSize")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub file_size: Option<String>,
    /// The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
    #[serde(rename = "creationTime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// u64: The uploaded video file's combined (video and audio) bitrate in bits per second.
    #[serde(rename = "bitrateBps")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bitrate_bps: Option<String>,
    /// A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
    #[serde(rename = "audioStreams")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audio_streams: Option<Vec<VideoFileDetailsAudioStream>>,
    /// The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
    #[serde(rename = "fileType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub file_type: Option<String>,
    /// The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
    #[serde(rename = "fileName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    /// The uploaded video file's container format.
    #[serde(rename = "container")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// u64: The length of the uploaded video in milliseconds.
    #[serde(rename = "durationMs")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub duration_ms: Option<String>,
    /// A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
    #[serde(rename = "videoStreams")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub video_streams: Option<Vec<VideoFileDetailsVideoStream>>,
}

/// Basic details about a channel section, including title, style and position.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionSnippet {
    /// The position of the channel section in the channel.
    #[serde(rename = "position")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub position: Option<u32>,
    /// The type of the channel section.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
    /// The style of the channel section.
    #[serde(rename = "style")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub style: Option<String>,
    /// The language of the channel section's default title and description.
    #[serde(rename = "defaultLanguage")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    #[serde(rename = "localized")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub localized: Option<ChannelSectionLocalization>,
    /// The ID that YouTube uses to uniquely identify the channel that published the channel section.
    #[serde(rename = "channelId")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
    /// The channel section's title for multiple_playlists and multiple_channels.
    #[serde(rename = "title")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct Subscription {
    #[serde(rename = "contentDetails")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub content_details: Option<SubscriptionContentDetails>,
    /// Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
    #[serde(rename = "kind")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Etag of this resource.
    #[serde(rename = "etag")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    #[serde(rename = "snippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub snippet: Option<SubscriptionSnippet>,
    /// The ID that YouTube uses to uniquely identify the subscription.
    #[serde(rename = "id")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "subscriberSnippet")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subscriber_snippet: Option<SubscriptionSubscriberSnippet>,
}

///
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct YoutubeParams {
    /// OAuth access token.
    #[serde(rename = "access_token")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    /// Legacy upload protocol for media (e.g. "media", "multipart").
    #[serde(rename = "uploadType")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_type: Option<String>,
    /// JSONP
    #[serde(rename = "callback")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub callback: Option<String>,
    /// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    #[serde(rename = "key")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Data format for response.
    #[serde(rename = "alt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alt: Option<String>,
    /// V1 error format.
    #[serde(rename = "$.xgafv")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dollar_xgafv: Option<String>,
    /// Returns response with indentations and line breaks.
    #[serde(rename = "prettyPrint")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pretty_print: Option<bool>,
    /// OAuth 2.0 token for the current user.
    #[serde(rename = "oauth_token")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub oauth_token: Option<String>,
    /// Selector specifying which fields to include in a partial response.
    #[serde(rename = "fields")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    /// Upload protocol for media (e.g. "raw", "multipart").
    #[serde(rename = "upload_protocol")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub upload_protocol: Option<String>,
    /// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    #[serde(rename = "quotaUser")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub quota_user: Option<String>,
}

/// Parameters for the `activities.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ActivitiesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "publishedBefore")]
    pub published_before: Option<String>,
    #[serde(rename = "publishedAfter")]
    pub published_after: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    #[serde(rename = "regionCode")]
    pub region_code: Option<String>,
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// The *part* parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set *part=snippet*, the API response will also contain all of those nested properties.
    #[serde(rename = "part")]
    pub part: String,
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    #[serde(rename = "home")]
    pub home: Option<bool>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
}

impl std::fmt::Display for ActivitiesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.published_before {
            write!(
                f,
                "&publishedBefore={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.published_after {
            write!(
                f,
                "&publishedAfter={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.region_code {
            write!(
                f,
                "&regionCode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.home {
            write!(
                f,
                "&home={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `captions.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// ID of the Google+ Page for the channel that the request is on behalf of.
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<String>,
    /// Returns the captions for the specified video.
    #[serde(rename = "videoId")]
    pub video_id: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// Returns the captions with the given IDs for Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
}

impl std::fmt::Display for CaptionsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&videoId={}",
            percent_encode(format!("{}", self.video_id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of {
            write!(
                f,
                "&onBehalfOf={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `captions.download` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionsDownloadParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// ID of the Google+ Page for the channel that the request is be on behalf of
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<String>,
    /// Convert the captions into this format. Supported options are sbv, srt, and vtt.
    #[serde(rename = "tfmt")]
    pub tfmt: Option<String>,
    /// tlang is the language code; machine translate the captions into this language.
    #[serde(rename = "tlang")]
    pub tlang: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The ID of the caption track to download, required for One Platform.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CaptionsDownloadParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.on_behalf_of {
            write!(
                f,
                "&onBehalfOf={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.tfmt {
            write!(
                f,
                "&tfmt={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.tlang {
            write!(
                f,
                "&tlang={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `captions.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// ID of the Google+ Page for the channel that the request is on behalf of.
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<String>,
    /// Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
    #[serde(rename = "sync")]
    pub sync: Option<bool>,
    /// The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for CaptionsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of {
            write!(
                f,
                "&onBehalfOf={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.sync {
            write!(
                f,
                "&sync={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `captions.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
    #[serde(rename = "sync")]
    pub sync: Option<bool>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// ID of the Google+ Page for the channel that the request is be on behalf of
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<String>,
    /// The *part* parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for CaptionsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.sync {
            write!(
                f,
                "&sync={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of {
            write!(
                f,
                "&onBehalfOf={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `captions.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CaptionsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    /// ID of the Google+ Page for the channel that the request is be on behalf of
    #[serde(rename = "onBehalfOf")]
    pub on_behalf_of: Option<String>,
}

impl std::fmt::Display for CaptionsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of {
            write!(
                f,
                "&onBehalfOf={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `abuseReports.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct AbuseReportsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for AbuseReportsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `playlists.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    #[serde(rename = "part")]
    pub part: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
}

impl std::fmt::Display for PlaylistsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlists.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for PlaylistsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlists.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return the playlists owned by the authenticated user.
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// Returen content in specified language
    #[serde(rename = "hl")]
    pub hl: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Return the playlists with the given IDs for Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Return the playlists owned by the specified channel ID.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// The *part* parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set *part=snippet*, the API response will contain all of those properties.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for PlaylistsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlists.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for PlaylistsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
    #[serde(rename = "part")]
    pub part: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for LiveBroadcastsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.bind` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsBindParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    #[serde(rename = "part")]
    pub part: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Stream to bind, if not set unbind the current one.
    #[serde(rename = "streamId")]
    pub stream_id: Option<String>,
    /// Broadcast to bind to the stream
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for LiveBroadcastsBindParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.stream_id {
            write!(
                f,
                "&streamId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveBroadcastsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.transition` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsTransitionParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The status to which the broadcast is going to transition.
    #[serde(rename = "broadcastStatus")]
    pub broadcast_status: String,
    /// Broadcast to transition.
    #[serde(rename = "id")]
    pub id: String,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveBroadcastsTransitionParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&broadcastStatus={}",
            percent_encode(
                format!("{}", self.broadcast_status).as_bytes(),
                NON_ALPHANUMERIC
            )
            .to_string()
        )?;
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return broadcasts with the given ids from Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// Return broadcasts with a certain status, e.g. active broadcasts.
    #[serde(rename = "broadcastStatus")]
    pub broadcast_status: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, status and statistics.
    #[serde(rename = "part")]
    pub part: String,
    /// Return only broadcasts with the selected type.
    #[serde(rename = "broadcastType")]
    pub broadcast_type: Option<String>,
}

impl std::fmt::Display for LiveBroadcastsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.broadcast_status {
            write!(
                f,
                "&broadcastStatus={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.broadcast_type {
            write!(
                f,
                "&broadcastType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.control` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsControlParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The wall clock time at which the action should be executed. Only one of offset_time_ms and walltime may be set at a time.
    #[serde(rename = "walltime")]
    pub walltime: Option<String>,
    /// Whether display or hide slate.
    #[serde(rename = "displaySlate")]
    pub display_slate: Option<bool>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// u64: The exact time when the actions (e.g. slate on) are executed. It is an offset from the first frame of the monitor stream. If not set, it means "now" or ASAP. This field should not be set if the monitor stream is disabled, otherwise an error will be returned.
    #[serde(rename = "offsetTimeMs")]
    pub offset_time_ms: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Broadcast to operate.
    #[serde(rename = "id")]
    pub id: String,
    /// The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveBroadcastsControlParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.walltime {
            write!(
                f,
                "&walltime={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.display_slate {
            write!(
                f,
                "&displaySlate={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.offset_time_ms {
            write!(
                f,
                "&offsetTimeMs={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveBroadcasts.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveBroadcastsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Broadcast to delete.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for LiveBroadcastsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveChatMessages.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessagesInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveChatMessagesInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `liveChatMessages.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessagesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *part* parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// Specifies the localization language in which the system messages should be returned.
    #[serde(rename = "hl")]
    pub hl: Option<String>,
    /// The id of the live chat for which comments should be returned.
    #[serde(rename = "liveChatId")]
    pub live_chat_id: String,
    /// Specifies the size of the profile image that should be returned for each user.
    #[serde(rename = "profileImageSize")]
    pub profile_image_size: Option<u32>,
}

impl std::fmt::Display for LiveChatMessagesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&liveChatId={}",
            percent_encode(
                format!("{}", self.live_chat_id).as_bytes(),
                NON_ALPHANUMERIC
            )
            .to_string()
        )?;
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.profile_image_size {
            write!(
                f,
                "&profileImageSize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveChatMessages.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatMessagesDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for LiveChatMessagesDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `liveChatBans.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatBansInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveChatBansInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `liveChatBans.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatBansDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for LiveChatBansDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `tests.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct TestsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for TestsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `search.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SearchListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Sort order of the results.
    #[serde(rename = "order")]
    pub order: Option<String>,
    /// Restrict results to a particular set of resource types from One Platform.
    #[serde(rename = "type")]
    pub typ: Option<String>,
    /// Filter on embeddable videos.
    #[serde(rename = "videoEmbeddable")]
    pub video_embeddable: Option<String>,
    /// Filter on resources published before this date.
    #[serde(rename = "publishedBefore")]
    pub published_before: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// Filter on distance from the location (specified above).
    #[serde(rename = "locationRadius")]
    pub location_radius: Option<String>,
    /// Filter on the livestream status of the videos.
    #[serde(rename = "eventType")]
    pub event_type: Option<String>,
    /// Filter on videos of a specific type.
    #[serde(rename = "videoType")]
    pub video_type: Option<String>,
    /// Restrict results to a particular topic.
    #[serde(rename = "topicId")]
    pub topic_id: Option<String>,
    /// Filter on resources published after this date.
    #[serde(rename = "publishedAfter")]
    pub published_after: Option<String>,
    /// Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.
    #[serde(rename = "forDeveloper")]
    pub for_developer: Option<bool>,
    /// Filter on the presence of captions on the videos.
    #[serde(rename = "videoCaption")]
    pub video_caption: Option<String>,
    /// Search for the private videos of the authenticated user.
    #[serde(rename = "forMine")]
    pub for_mine: Option<bool>,
    /// Filter on 3d videos.
    #[serde(rename = "videoDimension")]
    pub video_dimension: Option<String>,
    /// Filter on the license of the videos.
    #[serde(rename = "videoLicense")]
    pub video_license: Option<String>,
    /// Search related to a resource.
    #[serde(rename = "relatedToVideoId")]
    pub related_to_video_id: Option<String>,
    /// Filter on the duration of the videos.
    #[serde(rename = "videoDuration")]
    pub video_duration: Option<String>,
    /// Filter on the definition of the videos.
    #[serde(rename = "videoDefinition")]
    pub video_definition: Option<String>,
    /// Add a filter on the channel search.
    #[serde(rename = "channelType")]
    pub channel_type: Option<String>,
    /// Indicates whether the search results should include restricted content as well as standard content.
    #[serde(rename = "safeSearch")]
    pub safe_search: Option<String>,
    /// Filter on videos in a specific category.
    #[serde(rename = "videoCategoryId")]
    pub video_category_id: Option<String>,
    /// Return results relevant to this language.
    #[serde(rename = "relevanceLanguage")]
    pub relevance_language: Option<String>,
    /// Filter on location of the video
    #[serde(rename = "location")]
    pub location: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Display the content as seen by viewers in this country.
    #[serde(rename = "regionCode")]
    pub region_code: Option<String>,
    /// Filter on syndicated videos.
    #[serde(rename = "videoSyndicated")]
    pub video_syndicated: Option<String>,
    /// Filter on resources belonging to this channelId.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    /// Search owned by a content owner.
    #[serde(rename = "forContentOwner")]
    pub for_content_owner: Option<bool>,
    /// Textual search terms to match.
    #[serde(rename = "q")]
    pub q: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for SearchListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.order {
            write!(
                f,
                "&order={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.typ {
            write!(
                f,
                "&type={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_embeddable {
            write!(
                f,
                "&videoEmbeddable={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.published_before {
            write!(
                f,
                "&publishedBefore={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.location_radius {
            write!(
                f,
                "&locationRadius={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.event_type {
            write!(
                f,
                "&eventType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_type {
            write!(
                f,
                "&videoType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.topic_id {
            write!(
                f,
                "&topicId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.published_after {
            write!(
                f,
                "&publishedAfter={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.for_developer {
            write!(
                f,
                "&forDeveloper={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_caption {
            write!(
                f,
                "&videoCaption={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.for_mine {
            write!(
                f,
                "&forMine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_dimension {
            write!(
                f,
                "&videoDimension={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_license {
            write!(
                f,
                "&videoLicense={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.related_to_video_id {
            write!(
                f,
                "&relatedToVideoId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_duration {
            write!(
                f,
                "&videoDuration={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_definition {
            write!(
                f,
                "&videoDefinition={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_type {
            write!(
                f,
                "&channelType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.safe_search {
            write!(
                f,
                "&safeSearch={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_category_id {
            write!(
                f,
                "&videoCategoryId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.relevance_language {
            write!(
                f,
                "&relevanceLanguage={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.location {
            write!(
                f,
                "&location={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.region_code {
            write!(
                f,
                "&regionCode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_syndicated {
            write!(
                f,
                "&videoSyndicated={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.for_content_owner {
            write!(
                f,
                "&forContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.q {
            write!(
                f,
                "&q={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveStreams.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveStreamsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveStreams.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveStreamsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveStreams.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for LiveStreamsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveStreams.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveStreamsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return LiveStreams with the given ids from Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.
    #[serde(rename = "part")]
    pub part: String,
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
}

impl std::fmt::Display for LiveStreamsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `subscriptions.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for SubscriptionsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `subscriptions.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return the subscriptions to the subset of these channels that the authenticated user is subscribed to.
    #[serde(rename = "forChannelId")]
    pub for_channel_id: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Return the subscribers of the given channel owner.
    #[serde(rename = "mySubscribers")]
    pub my_subscribers: Option<bool>,
    /// The order of the returned subscriptions
    #[serde(rename = "order")]
    pub order: Option<String>,
    #[serde(rename = "myRecentSubscribers")]
    pub my_recent_subscribers: Option<bool>,
    /// Return the subscriptions of the given channel owner.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    /// Return the subscriptions with the given IDs for Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set *part=snippet*, the API response will also contain all of those nested properties.
    #[serde(rename = "part")]
    pub part: String,
    /// Flag for returning the subscriptions of the authenticated user.
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
}

impl std::fmt::Display for SubscriptionsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.for_channel_id {
            write!(
                f,
                "&forChannelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.my_subscribers {
            write!(
                f,
                "&mySubscribers={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.order {
            write!(
                f,
                "&order={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.my_recent_subscribers {
            write!(
                f,
                "&myRecentSubscribers={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `subscriptions.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SubscriptionsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for SubscriptionsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `thirdPartyLinks.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLinksUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for ThirdPartyLinksUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `thirdPartyLinks.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLinksDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Type of the link to be deleted.
    #[serde(rename = "type")]
    pub typ: String,
    /// Delete the partner links with the given linking token.
    #[serde(rename = "linkingToken")]
    pub linking_token: String,
    /// Do not use. Required for compatibility.
    #[serde(rename = "part")]
    pub part: Option<String>,
}

impl std::fmt::Display for ThirdPartyLinksDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&type={}",
            percent_encode(format!("{}", self.typ).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&linkingToken={}",
            percent_encode(
                format!("{}", self.linking_token).as_bytes(),
                NON_ALPHANUMERIC
            )
            .to_string()
        )?;
        if let Some(ref v) = self.part {
            write!(
                f,
                "&part={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `thirdPartyLinks.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLinksInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for ThirdPartyLinksInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `thirdPartyLinks.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThirdPartyLinksListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the thirdPartyLink resource parts that the API response will include. Supported values are linkingToken, status, and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// Get a third party link of the given type.
    #[serde(rename = "type")]
    pub typ: Option<String>,
    /// Get a third party link with the given linking token.
    #[serde(rename = "linkingToken")]
    pub linking_token: Option<String>,
}

impl std::fmt::Display for ThirdPartyLinksListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.typ {
            write!(
                f,
                "&type={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.linking_token {
            write!(
                f,
                "&linkingToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `members.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembersListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Filter members in the results set to the ones that have access to a level.
    #[serde(rename = "hasAccessToLevel")]
    pub has_access_to_level: Option<String>,
    /// The *part* parameter specifies the member resource parts that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Parameter that specifies which channel members to return.
    #[serde(rename = "mode")]
    pub mode: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// Comma separated list of channel IDs. Only data about members that are part of this list will be included in the response.
    #[serde(rename = "filterByMemberChannelId")]
    pub filter_by_member_channel_id: Option<String>,
}

impl std::fmt::Display for MembersListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.has_access_to_level {
            write!(
                f,
                "&hasAccessToLevel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mode {
            write!(
                f,
                "&mode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.filter_by_member_channel_id {
            write!(
                f,
                "&filterByMemberChannelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channelSections.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for ChannelSectionsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channelSections.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return the ChannelSections owned by the specified channel ID.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    /// Return the ChannelSections with the given IDs for Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set *part=snippet*, the API response will also contain all of those nested properties.
    #[serde(rename = "part")]
    pub part: String,
    /// Return the ChannelSections owned by the authenticated user.
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// Return content in specified language
    #[serde(rename = "hl")]
    pub hl: Option<String>,
}

impl std::fmt::Display for ChannelSectionsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channelSections.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for ChannelSectionsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channelSections.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelSectionsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for ChannelSectionsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `sponsors.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SponsorsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Parameter that specifies which channel sponsors to return.
    #[serde(rename = "filter")]
    pub filter: Option<String>,
    /// The *part* parameter specifies the sponsor resource parts that the API response will include. Supported values are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
}

impl std::fmt::Display for SponsorsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.filter {
            write!(
                f,
                "&filter={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `watermarks.set` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct WatermarksSetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    #[serde(rename = "channelId")]
    pub channel_id: String,
}

impl std::fmt::Display for WatermarksSetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&channelId={}",
            percent_encode(format!("{}", self.channel_id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `watermarks.unset` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct WatermarksUnsetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    #[serde(rename = "channelId")]
    pub channel_id: String,
}

impl std::fmt::Display for WatermarksUnsetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&channelId={}",
            percent_encode(format!("{}", self.channel_id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `thumbnails.set` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ThumbnailsSetParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Returns the Thumbnail with the given video IDs for Stubby or Apiary.
    #[serde(rename = "videoId")]
    pub video_id: String,
}

impl std::fmt::Display for ThumbnailsSetParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&videoId={}",
            percent_encode(format!("{}", self.video_id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videoCategories.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoCategoriesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
    #[serde(rename = "hl")]
    pub hl: Option<String>,
    #[serde(rename = "regionCode")]
    pub region_code: Option<String>,
    /// Returns the video categories with the given IDs for Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
}

impl std::fmt::Display for VideoCategoriesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.region_code {
            write!(
                f,
                "&regionCode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `membershipsLevels.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct MembershipsLevelsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the membershipsLevel resource parts that the API response will include. Supported values are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for MembershipsLevelsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `comments.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for CommentsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `comments.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CommentsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `comments.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for CommentsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `comments.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Returns the comments with the given IDs for One Platform.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// Returns replies to the specified comment. Note, currently YouTube features only one level of replies (ie replies to top level comments). However replies to replies may be supported in the future.
    #[serde(rename = "parentId")]
    pub parent_id: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.
    #[serde(rename = "part")]
    pub part: String,
    /// The requested text format for the returned comments.
    #[serde(rename = "textFormat")]
    pub text_format: Option<String>,
}

impl std::fmt::Display for CommentsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.parent_id {
            write!(
                f,
                "&parentId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.text_format {
            write!(
                f,
                "&textFormat={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `comments.markAsSpam` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentsMarkAsSpamParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Flags the comments with the given IDs as spam in the caller's opinion.
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CommentsMarkAsSpamParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `comments.setModerationStatus` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentsSetModerationStatusParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.
    #[serde(rename = "banAuthor")]
    pub ban_author: Option<bool>,
    /// Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: MODERATION_STATUS_PUBLISHED, MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.
    #[serde(rename = "moderationStatus")]
    pub moderation_status: String,
    /// Modifies the moderation status of the comments with the given IDs
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for CommentsSetModerationStatusParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&moderationStatus={}",
            percent_encode(
                format!("{}", self.moderation_status).as_bytes(),
                NON_ALPHANUMERIC
            )
            .to_string()
        )?;
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.ban_author {
            write!(
                f,
                "&banAuthor={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `superChatEvents.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct SuperChatEventsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return rendered funding amounts in specified language.
    #[serde(rename = "hl")]
    pub hl: Option<String>,
    /// The *part* parameter specifies the superChatEvent resource parts that the API response will include. Supported values are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
}

impl std::fmt::Display for SuperChatEventsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveChatModerators.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatModeratorsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for LiveChatModeratorsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `liveChatModerators.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatModeratorsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *part* parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// The id of the live chat for which moderators should be returned.
    #[serde(rename = "liveChatId")]
    pub live_chat_id: String,
}

impl std::fmt::Display for LiveChatModeratorsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&liveChatId={}",
            percent_encode(
                format!("{}", self.live_chat_id).as_bytes(),
                NON_ALPHANUMERIC
            )
            .to_string()
        )?;
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `liveChatModerators.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct LiveChatModeratorsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for LiveChatModeratorsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `i18nLanguages.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nLanguagesListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "hl")]
    pub hl: Option<String>,
    /// The *part* parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for I18nLanguagesListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channelBanners.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelBannersInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// Unused, channel_id is currently derived from the security context of the requestor.
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for ChannelBannersInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `commentThreads.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThreadsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Returns the comment threads for all the channel comments (ie does not include comments left on videos).
    #[serde(rename = "channelId")]
    pub channel_id: Option<String>,
    /// Returns the comment threads with the given IDs for Stubby or Apiary.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// Returns the comment threads of all videos of the channel and the channel comments as well.
    #[serde(rename = "allThreadsRelatedToChannelId")]
    pub all_threads_related_to_channel_id: Option<String>,
    /// The requested text format for the returned comments.
    #[serde(rename = "textFormat")]
    pub text_format: Option<String>,
    /// Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
    #[serde(rename = "moderationStatus")]
    pub moderation_status: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
    #[serde(rename = "part")]
    pub part: String,
    /// Returns the comment threads of the specified video.
    #[serde(rename = "videoId")]
    pub video_id: Option<String>,
    /// Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
    #[serde(rename = "searchTerms")]
    pub search_terms: Option<String>,
    #[serde(rename = "order")]
    pub order: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
}

impl std::fmt::Display for CommentThreadsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.channel_id {
            write!(
                f,
                "&channelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.all_threads_related_to_channel_id {
            write!(
                f,
                "&allThreadsRelatedToChannelId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.text_format {
            write!(
                f,
                "&textFormat={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.moderation_status {
            write!(
                f,
                "&moderationStatus={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_id {
            write!(
                f,
                "&videoId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.search_terms {
            write!(
                f,
                "&searchTerms={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.order {
            write!(
                f,
                "&order={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `commentThreads.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThreadsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for CommentThreadsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `commentThreads.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct CommentThreadsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for CommentThreadsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `i18nRegions.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct I18nRegionsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.
    #[serde(rename = "part")]
    pub part: String,
    #[serde(rename = "hl")]
    pub hl: Option<String>,
}

impl std::fmt::Display for I18nRegionsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlistItems.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// Return the playlist items within the given playlist.
    #[serde(rename = "playlistId")]
    pub playlist_id: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
    #[serde(rename = "part")]
    pub part: String,
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// Return the playlist items associated with the given video ID.
    #[serde(rename = "videoId")]
    pub video_id: Option<String>,
}

impl std::fmt::Display for PlaylistItemsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.playlist_id {
            write!(
                f,
                "&playlistId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_id {
            write!(
                f,
                "&videoId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlistItems.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemsInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for PlaylistItemsInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlistItems.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.
    #[serde(rename = "part")]
    pub part: String,
}

impl std::fmt::Display for PlaylistItemsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `playlistItems.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct PlaylistItemsDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
}

impl std::fmt::Display for PlaylistItemsDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videoAbuseReportReasons.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideoAbuseReportReasonsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.
    #[serde(rename = "part")]
    pub part: String,
    #[serde(rename = "hl")]
    pub hl: Option<String>,
}

impl std::fmt::Display for VideoAbuseReportReasonsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videos.delete` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosDeleteParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for VideosDeleteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videos.rate` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosRateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "rating")]
    pub rating: String,
}

impl std::fmt::Display for VideosRateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        write!(
            f,
            "&rating={}",
            percent_encode(format!("{}", self.rating).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        Ok(())
    }
}

/// Parameters for the `videos.insert` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosInsertParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    #[serde(rename = "onBehalfOfContentOwnerChannel")]
    pub on_behalf_of_content_owner_channel: Option<String>,
    /// Should stabilize be applied to the upload.
    #[serde(rename = "stabilize")]
    pub stabilize: Option<bool>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    #[serde(rename = "part")]
    pub part: String,
    /// Should auto-levels be applied to the upload.
    #[serde(rename = "autoLevels")]
    pub auto_levels: Option<bool>,
    /// Notify the channel subscribers about the new video. As default, the notification is enabled.
    #[serde(rename = "notifySubscribers")]
    pub notify_subscribers: Option<bool>,
}

impl std::fmt::Display for VideosInsertParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner_channel {
            write!(
                f,
                "&onBehalfOfContentOwnerChannel={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.stabilize {
            write!(
                f,
                "&stabilize={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.auto_levels {
            write!(
                f,
                "&autoLevels={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.notify_subscribers {
            write!(
                f,
                "&notifySubscribers={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videos.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    #[serde(rename = "part")]
    pub part: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for VideosUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videos.getRating` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosGetRatingParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    #[serde(rename = "id")]
    pub id: String,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for VideosGetRatingParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&id={}",
            percent_encode(format!("{}", self.id).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videos.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// Return the videos that are in the specified chart.
    #[serde(rename = "chart")]
    pub chart: Option<String>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    #[serde(rename = "locale")]
    pub locale: Option<String>,
    /// Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
    #[serde(rename = "hl")]
    pub hl: Option<String>,
    /// Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE.
    #[serde(rename = "myRating")]
    pub my_rating: Option<String>,
    #[serde(rename = "maxHeight")]
    pub max_height: Option<i32>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// Return videos with the given ids.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
    #[serde(rename = "part")]
    pub part: String,
    /// Use a chart that is specific to the specified region
    #[serde(rename = "regionCode")]
    pub region_code: Option<String>,
    /// Return the player with maximum height specified in
    #[serde(rename = "maxWidth")]
    pub max_width: Option<i32>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// Use chart that is specific to the specified video category
    #[serde(rename = "videoCategoryId")]
    pub video_category_id: Option<String>,
}

impl std::fmt::Display for VideosListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.chart {
            write!(
                f,
                "&chart={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.locale {
            write!(
                f,
                "&locale={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.my_rating {
            write!(
                f,
                "&myRating={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_height {
            write!(
                f,
                "&maxHeight={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.region_code {
            write!(
                f,
                "&regionCode={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_width {
            write!(
                f,
                "&maxWidth={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.video_category_id {
            write!(
                f,
                "&videoCategoryId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `videos.reportAbuse` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct VideosReportAbuseParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for VideosReportAbuseParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channels.list` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelsListParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
    /// Return the channels subscribed to the authenticated user
    #[serde(rename = "mySubscribers")]
    pub my_subscribers: Option<bool>,
    /// Return the channels with the specified IDs.
    #[serde(rename = "id")]
    pub id: Option<String>,
    /// Return the channel associated with a YouTube username.
    #[serde(rename = "forUsername")]
    pub for_username: Option<String>,
    /// The *part* parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set *part=contentDetails*, the API response will also contain all of those nested properties.
    #[serde(rename = "part")]
    pub part: String,
    /// Return the ids of channels owned by the authenticated user.
    #[serde(rename = "mine")]
    pub mine: Option<bool>,
    /// Return the channels managed by the authenticated user.
    #[serde(rename = "managedByMe")]
    pub managed_by_me: Option<bool>,
    /// Return the channels within the specified guide category ID.
    #[serde(rename = "categoryId")]
    pub category_id: Option<String>,
    /// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    #[serde(rename = "pageToken")]
    pub page_token: Option<String>,
    /// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    #[serde(rename = "maxResults")]
    pub max_results: Option<u32>,
    /// Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
    #[serde(rename = "hl")]
    pub hl: Option<String>,
}

impl std::fmt::Display for ChannelsListParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.my_subscribers {
            write!(
                f,
                "&mySubscribers={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.id {
            write!(
                f,
                "&id={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.for_username {
            write!(
                f,
                "&forUsername={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.mine {
            write!(
                f,
                "&mine={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.managed_by_me {
            write!(
                f,
                "&managedByMe={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.category_id {
            write!(
                f,
                "&categoryId={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.page_token {
            write!(
                f,
                "&pageToken={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.max_results {
            write!(
                f,
                "&maxResults={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.hl {
            write!(
                f,
                "&hl={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// Parameters for the `channels.update` method.
#[derive(Serialize, Deserialize, Debug, Clone, Default)]
pub struct ChannelsUpdateParams {
    /// General attributes applying to any API call
    #[serde(flatten)]
    pub youtube_params: Option<YoutubeParams>,
    /// The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.
    #[serde(rename = "part")]
    pub part: String,
    /// The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.
    #[serde(rename = "onBehalfOfContentOwner")]
    pub on_behalf_of_content_owner: Option<String>,
}

impl std::fmt::Display for ChannelsUpdateParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "&part={}",
            percent_encode(format!("{}", self.part).as_bytes(), NON_ALPHANUMERIC).to_string()
        )?;
        if let Some(ref v) = self.on_behalf_of_content_owner {
            write!(
                f,
                "&onBehalfOfContentOwner={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

impl std::fmt::Display for YoutubeParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if let Some(ref v) = self.access_token {
            write!(
                f,
                "&access_token={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.upload_type {
            write!(
                f,
                "&uploadType={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.callback {
            write!(
                f,
                "&callback={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.key {
            write!(
                f,
                "&key={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.alt {
            write!(
                f,
                "&alt={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.dollar_xgafv {
            write!(
                f,
                "&$.xgafv={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.pretty_print {
            write!(
                f,
                "&prettyPrint={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.oauth_token {
            write!(
                f,
                "&oauth_token={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.fields {
            write!(
                f,
                "&fields={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.upload_protocol {
            write!(
                f,
                "&upload_protocol={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        if let Some(ref v) = self.quota_user {
            write!(
                f,
                "&quotaUser={}",
                percent_encode(format!("{}", v).as_bytes(), NON_ALPHANUMERIC).to_string()
            )?;
        }
        Ok(())
    }
}

/// The Youtube Activities service represents the Activities resource.
pub struct ActivitiesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ActivitiesService {
    /// Create a new ActivitiesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> ActivitiesService {
        ActivitiesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &ActivitiesListParams) -> Result<ActivityListResponse> {
        let rel_path = format!("youtube/v3/activities",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube Captions service represents the Captions resource.
pub struct CaptionsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CaptionsService {
    /// Create a new CaptionsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> CaptionsService {
        CaptionsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &CaptionsListParams) -> Result<CaptionListResponse> {
        let rel_path = format!("youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Downloads a caption track.
    ///
    /// This method potentially downloads data. See documentation of `Download`.
    pub async fn download<'a>(
        &'a mut self,
        params: &CaptionsDownloadParams,
    ) -> Result<Download<'a, EmptyRequest, ()>> {
        let rel_path = format!(
            "youtube/v3/captions/{id}",
            id = percent_encode(params.id.as_bytes(), NON_ALPHANUMERIC)
        );
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;

        do_download(&self.client, &full_uri, headers, "GET".into(), opt_request).await
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &CaptionsUpdateParams,
        req: &Caption,
    ) -> Result<Caption> {
        let rel_path = format!("youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Updates an existing resource.
    ///
    /// This method is a variant of `update()`, taking data for upload. It performs a multipart upload.
    pub async fn update_upload(
        &mut self,
        params: &CaptionsUpdateParams,
        req: &Caption,
        data: hyper::body::Bytes,
    ) -> Result<Caption> {
        let rel_path = format!("/upload/youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=multipart{params}", params = params);

        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);

        do_upload_multipart(&self.client, &full_uri, &headers, "PUT", opt_request, data).await
    }

    /// Updates an existing resource.
    ///
    /// This method is a variant of `update()`, taking data for upload.
    /// It returns a `ResumableUpload` upload manager which you can use to stream larger amounts
    /// of data to the API. The result of this call will be returned by the `ResumableUpload` method
    /// you choose for the upload.
    pub async fn update_resumable_upload<'client>(
        &'client mut self,
        params: &CaptionsUpdateParams,
        req: &Caption,
    ) -> Result<ResumableUpload<'client, Caption>> {
        let rel_path = format!("/resumable/upload/youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=resumable{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        let (_resp, headers): (EmptyResponse, hyper::HeaderMap) =
            do_request_with_headers(&self.client, &full_uri, &headers, "PUT", opt_request).await?;
        if let Some(dest) = headers.get(hyper::header::LOCATION) {
            Ok(ResumableUpload::new(
                hyper::Uri::try_from(dest.to_str()?)?,
                &self.client,
                5 * 1024 * 1024,
            ))
        } else {
            Err(Error::from(ApiError::RedirectError(format!(
                "Resumable upload response didn't contain Location: {:?}",
                headers
            )))
            .context(format!("{:?}", headers)))?
        }
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &CaptionsInsertParams,
        req: &Caption,
    ) -> Result<Caption> {
        let rel_path = format!("youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Inserts a new resource into this collection.
    ///
    /// This method is a variant of `insert()`, taking data for upload. It performs a multipart upload.
    pub async fn insert_upload(
        &mut self,
        params: &CaptionsInsertParams,
        req: &Caption,
        data: hyper::body::Bytes,
    ) -> Result<Caption> {
        let rel_path = format!("/upload/youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=multipart{params}", params = params);

        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);

        do_upload_multipart(&self.client, &full_uri, &headers, "POST", opt_request, data).await
    }

    /// Inserts a new resource into this collection.
    ///
    /// This method is a variant of `insert()`, taking data for upload.
    /// It returns a `ResumableUpload` upload manager which you can use to stream larger amounts
    /// of data to the API. The result of this call will be returned by the `ResumableUpload` method
    /// you choose for the upload.
    pub async fn insert_resumable_upload<'client>(
        &'client mut self,
        params: &CaptionsInsertParams,
        req: &Caption,
    ) -> Result<ResumableUpload<'client, Caption>> {
        let rel_path = format!("/resumable/upload/youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=resumable{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        let (_resp, headers): (EmptyResponse, hyper::HeaderMap) =
            do_request_with_headers(&self.client, &full_uri, &headers, "POST", opt_request).await?;
        if let Some(dest) = headers.get(hyper::header::LOCATION) {
            Ok(ResumableUpload::new(
                hyper::Uri::try_from(dest.to_str()?)?,
                &self.client,
                5 * 1024 * 1024,
            ))
        } else {
            Err(Error::from(ApiError::RedirectError(format!(
                "Resumable upload response didn't contain Location: {:?}",
                headers
            )))
            .context(format!("{:?}", headers)))?
        }
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &CaptionsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/captions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube AbuseReports service represents the AbuseReports resource.
pub struct AbuseReportsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl AbuseReportsService {
    /// Create a new AbuseReportsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> AbuseReportsService {
        AbuseReportsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &AbuseReportsInsertParams,
        req: &AbuseReport,
    ) -> Result<AbuseReport> {
        let rel_path = format!("youtube/v3/abuseReports",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube Playlists service represents the Playlists resource.
pub struct PlaylistsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl PlaylistsService {
    /// Create a new PlaylistsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> PlaylistsService {
        PlaylistsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &PlaylistsInsertParams,
        req: &Playlist,
    ) -> Result<Playlist> {
        let rel_path = format!("youtube/v3/playlists",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &PlaylistsUpdateParams,
        req: &Playlist,
    ) -> Result<Playlist> {
        let rel_path = format!("youtube/v3/playlists",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &PlaylistsListParams) -> Result<PlaylistListResponse> {
        let rel_path = format!("youtube/v3/playlists",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &PlaylistsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/playlists",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube LiveBroadcasts service represents the LiveBroadcasts resource.
pub struct LiveBroadcastsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl LiveBroadcastsService {
    /// Create a new LiveBroadcastsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> LiveBroadcastsService {
        LiveBroadcastsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new stream for the authenticated user.
    pub async fn insert(
        &mut self,
        params: &LiveBroadcastsInsertParams,
        req: &LiveBroadcast,
    ) -> Result<LiveBroadcast> {
        let rel_path = format!("youtube/v3/liveBroadcasts",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Bind a broadcast to a stream.
    pub async fn bind(&mut self, params: &LiveBroadcastsBindParams) -> Result<LiveBroadcast> {
        let rel_path = format!("youtube/v3/liveBroadcasts/bind",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates an existing broadcast for the authenticated user.
    pub async fn update(
        &mut self,
        params: &LiveBroadcastsUpdateParams,
        req: &LiveBroadcast,
    ) -> Result<LiveBroadcast> {
        let rel_path = format!("youtube/v3/liveBroadcasts",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Transition a broadcast to a given status.
    pub async fn transition(
        &mut self,
        params: &LiveBroadcastsTransitionParams,
    ) -> Result<LiveBroadcast> {
        let rel_path = format!("youtube/v3/liveBroadcasts/transition",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Retrieve the list of broadcasts associated with the given channel.
    pub async fn list(
        &mut self,
        params: &LiveBroadcastsListParams,
    ) -> Result<LiveBroadcastListResponse> {
        let rel_path = format!("youtube/v3/liveBroadcasts",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Slate and recording control of the live broadcast. Support actions: slate on/off, recording start/stop/pause/resume. Design doc: goto/yt-api-liveBroadcast-control
    pub async fn control(&mut self, params: &LiveBroadcastsControlParams) -> Result<LiveBroadcast> {
        let rel_path = format!("youtube/v3/liveBroadcasts/control",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Delete a given broadcast.
    pub async fn delete(&mut self, params: &LiveBroadcastsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/liveBroadcasts",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube LiveChatMessages service represents the LiveChatMessages resource.
pub struct LiveChatMessagesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl LiveChatMessagesService {
    /// Create a new LiveChatMessagesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> LiveChatMessagesService {
        LiveChatMessagesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &LiveChatMessagesInsertParams,
        req: &LiveChatMessage,
    ) -> Result<LiveChatMessage> {
        let rel_path = format!("youtube/v3/liveChat/messages",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &LiveChatMessagesListParams,
    ) -> Result<LiveChatMessageListResponse> {
        let rel_path = format!("youtube/v3/liveChat/messages",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Deletes a chat message.
    pub async fn delete(&mut self, params: &LiveChatMessagesDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/liveChat/messages",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube LiveChatBans service represents the LiveChatBans resource.
pub struct LiveChatBansService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl LiveChatBansService {
    /// Create a new LiveChatBansService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> LiveChatBansService {
        LiveChatBansService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &LiveChatBansInsertParams,
        req: &LiveChatBan,
    ) -> Result<LiveChatBan> {
        let rel_path = format!("youtube/v3/liveChat/bans",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Deletes a chat ban.
    pub async fn delete(&mut self, params: &LiveChatBansDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/liveChat/bans",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube Tests service represents the Tests resource.
pub struct TestsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl TestsService {
    /// Create a new TestsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> TestsService {
        TestsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// POST method.
    pub async fn insert(&mut self, params: &TestsInsertParams, req: &TestItem) -> Result<TestItem> {
        let rel_path = format!("youtube/v3/tests",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube Search service represents the Search resource.
pub struct SearchService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl SearchService {
    /// Create a new SearchService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> SearchService {
        SearchService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of search resources
    pub async fn list(&mut self, params: &SearchListParams) -> Result<SearchListResponse> {
        let rel_path = format!("youtube/v3/search",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube LiveStreams service represents the LiveStreams resource.
pub struct LiveStreamsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl LiveStreamsService {
    /// Create a new LiveStreamsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> LiveStreamsService {
        LiveStreamsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new stream for the authenticated user.
    pub async fn insert(
        &mut self,
        params: &LiveStreamsInsertParams,
        req: &LiveStream,
    ) -> Result<LiveStream> {
        let rel_path = format!("youtube/v3/liveStreams",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates an existing stream for the authenticated user.
    pub async fn update(
        &mut self,
        params: &LiveStreamsUpdateParams,
        req: &LiveStream,
    ) -> Result<LiveStream> {
        let rel_path = format!("youtube/v3/liveStreams",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Deletes an existing stream for the authenticated user.
    pub async fn delete(&mut self, params: &LiveStreamsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/liveStreams",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Retrieve the list of streams associated with the given channel. --
    pub async fn list(&mut self, params: &LiveStreamsListParams) -> Result<LiveStreamListResponse> {
        let rel_path = format!("youtube/v3/liveStreams",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube Subscriptions service represents the Subscriptions resource.
pub struct SubscriptionsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl SubscriptionsService {
    /// Create a new SubscriptionsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> SubscriptionsService {
        SubscriptionsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &SubscriptionsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/subscriptions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &SubscriptionsListParams,
    ) -> Result<SubscriptionListResponse> {
        let rel_path = format!("youtube/v3/subscriptions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &SubscriptionsInsertParams,
        req: &Subscription,
    ) -> Result<Subscription> {
        let rel_path = format!("youtube/v3/subscriptions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube ThirdPartyLinks service represents the ThirdPartyLinks resource.
pub struct ThirdPartyLinksService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ThirdPartyLinksService {
    /// Create a new ThirdPartyLinksService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> ThirdPartyLinksService {
        ThirdPartyLinksService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &ThirdPartyLinksUpdateParams,
        req: &ThirdPartyLink,
    ) -> Result<ThirdPartyLink> {
        let rel_path = format!("youtube/v3/thirdPartyLinks",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &ThirdPartyLinksDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/thirdPartyLinks",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &ThirdPartyLinksInsertParams,
        req: &ThirdPartyLink,
    ) -> Result<ThirdPartyLink> {
        let rel_path = format!("youtube/v3/thirdPartyLinks",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &ThirdPartyLinksListParams) -> Result<ThirdPartyLink> {
        let rel_path = format!("youtube/v3/thirdPartyLinks",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube Members service represents the Members resource.
pub struct MembersService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl MembersService {
    /// Create a new MembersService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> MembersService {
        MembersService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of members that match the request criteria for a channel.
    pub async fn list(&mut self, params: &MembersListParams) -> Result<MemberListResponse> {
        let rel_path = format!("youtube/v3/members",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube ChannelSections service represents the ChannelSections resource.
pub struct ChannelSectionsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ChannelSectionsService {
    /// Create a new ChannelSectionsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> ChannelSectionsService {
        ChannelSectionsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &ChannelSectionsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/channelSections",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &ChannelSectionsListParams,
    ) -> Result<ChannelSectionListResponse> {
        let rel_path = format!("youtube/v3/channelSections",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &ChannelSectionsUpdateParams,
        req: &ChannelSection,
    ) -> Result<ChannelSection> {
        let rel_path = format!("youtube/v3/channelSections",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &ChannelSectionsInsertParams,
        req: &ChannelSection,
    ) -> Result<ChannelSection> {
        let rel_path = format!("youtube/v3/channelSections",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube Sponsors service represents the Sponsors resource.
pub struct SponsorsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl SponsorsService {
    /// Create a new SponsorsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> SponsorsService {
        SponsorsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of sponsors that match the request criteria for a channel.
    pub async fn list(&mut self, params: &SponsorsListParams) -> Result<SponsorListResponse> {
        let rel_path = format!("youtube/v3/sponsors",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube Watermarks service represents the Watermarks resource.
pub struct WatermarksService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl WatermarksService {
    /// Create a new WatermarksService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> WatermarksService {
        WatermarksService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Allows upload of watermark image and setting it for a channel.
    pub async fn set(&mut self, params: &WatermarksSetParams, req: &InvideoBranding) -> Result<()> {
        let rel_path = format!("youtube/v3/watermarks/set",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Allows upload of watermark image and setting it for a channel.
    ///
    /// This method is a variant of `set()`, taking data for upload. It performs a multipart upload.
    pub async fn set_upload(
        &mut self,
        params: &WatermarksSetParams,
        req: &InvideoBranding,
        data: hyper::body::Bytes,
    ) -> Result<()> {
        let rel_path = format!("/upload/youtube/v3/watermarks/set",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=multipart{params}", params = params);

        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);

        do_upload_multipart(&self.client, &full_uri, &headers, "POST", opt_request, data).await
    }

    /// Allows upload of watermark image and setting it for a channel.
    ///
    /// This method is a variant of `set()`, taking data for upload.
    /// It returns a `ResumableUpload` upload manager which you can use to stream larger amounts
    /// of data to the API. The result of this call will be returned by the `ResumableUpload` method
    /// you choose for the upload.
    pub async fn set_resumable_upload<'client>(
        &'client mut self,
        params: &WatermarksSetParams,
        req: &InvideoBranding,
    ) -> Result<ResumableUpload<'client, ()>> {
        let rel_path = format!("/resumable/upload/youtube/v3/watermarks/set",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=resumable{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        let (_resp, headers): (EmptyResponse, hyper::HeaderMap) =
            do_request_with_headers(&self.client, &full_uri, &headers, "POST", opt_request).await?;
        if let Some(dest) = headers.get(hyper::header::LOCATION) {
            Ok(ResumableUpload::new(
                hyper::Uri::try_from(dest.to_str()?)?,
                &self.client,
                5 * 1024 * 1024,
            ))
        } else {
            Err(Error::from(ApiError::RedirectError(format!(
                "Resumable upload response didn't contain Location: {:?}",
                headers
            )))
            .context(format!("{:?}", headers)))?
        }
    }

    /// Allows removal of channel watermark.
    pub async fn unset(&mut self, params: &WatermarksUnsetParams) -> Result<()> {
        let rel_path = format!("youtube/v3/watermarks/unset",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube Thumbnails service represents the Thumbnails resource.
pub struct ThumbnailsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ThumbnailsService {
    /// Create a new ThumbnailsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> ThumbnailsService {
        ThumbnailsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
    pub async fn set(&mut self, params: &ThumbnailsSetParams) -> Result<ThumbnailSetResponse> {
        let rel_path = format!("youtube/v3/thumbnails/set",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
    ///
    /// This method is a variant of `set()`, taking data for upload. It performs a multipart upload.
    pub async fn set_upload(
        &mut self,
        params: &ThumbnailsSetParams,
        data: hyper::body::Bytes,
    ) -> Result<ThumbnailSetResponse> {
        let rel_path = format!("/upload/youtube/v3/thumbnails/set",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=multipart{params}", params = params);

        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;

        do_upload_multipart(&self.client, &full_uri, &headers, "POST", opt_request, data).await
    }

    /// As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
    ///
    /// This method is a variant of `set()`, taking data for upload.
    /// It returns a `ResumableUpload` upload manager which you can use to stream larger amounts
    /// of data to the API. The result of this call will be returned by the `ResumableUpload` method
    /// you choose for the upload.
    pub async fn set_resumable_upload<'client>(
        &'client mut self,
        params: &ThumbnailsSetParams,
    ) -> Result<ResumableUpload<'client, ThumbnailSetResponse>> {
        let rel_path = format!("/resumable/upload/youtube/v3/thumbnails/set",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=resumable{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let (_resp, headers): (EmptyResponse, hyper::HeaderMap) =
            do_request_with_headers(&self.client, &full_uri, &headers, "POST", opt_request).await?;
        if let Some(dest) = headers.get(hyper::header::LOCATION) {
            Ok(ResumableUpload::new(
                hyper::Uri::try_from(dest.to_str()?)?,
                &self.client,
                5 * 1024 * 1024,
            ))
        } else {
            Err(Error::from(ApiError::RedirectError(format!(
                "Resumable upload response didn't contain Location: {:?}",
                headers
            )))
            .context(format!("{:?}", headers)))?
        }
    }
}

/// The Youtube VideoCategories service represents the VideoCategories resource.
pub struct VideoCategoriesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl VideoCategoriesService {
    /// Create a new VideoCategoriesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> VideoCategoriesService {
        VideoCategoriesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &VideoCategoriesListParams,
    ) -> Result<VideoCategoryListResponse> {
        let rel_path = format!("youtube/v3/videoCategories",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube MembershipsLevels service represents the MembershipsLevels resource.
pub struct MembershipsLevelsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl MembershipsLevelsService {
    /// Create a new MembershipsLevelsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> MembershipsLevelsService {
        MembershipsLevelsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of all pricing levels offered by a creator to the fans.
    pub async fn list(
        &mut self,
        params: &MembershipsLevelsListParams,
    ) -> Result<MembershipsLevelListResponse> {
        let rel_path = format!("youtube/v3/membershipsLevels",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube Comments service represents the Comments resource.
pub struct CommentsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CommentsService {
    /// Create a new CommentsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> CommentsService {
        CommentsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &CommentsUpdateParams,
        req: &Comment,
    ) -> Result<Comment> {
        let rel_path = format!("youtube/v3/comments",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &CommentsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/comments",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &CommentsInsertParams,
        req: &Comment,
    ) -> Result<Comment> {
        let rel_path = format!("youtube/v3/comments",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &CommentsListParams) -> Result<CommentListResponse> {
        let rel_path = format!("youtube/v3/comments",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Expresses the caller's opinion that one or more comments should be flagged as spam.
    pub async fn mark_as_spam(&mut self, params: &CommentsMarkAsSpamParams) -> Result<()> {
        let rel_path = format!("youtube/v3/comments/markAsSpam",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Sets the moderation status of one or more comments.
    pub async fn set_moderation_status(
        &mut self,
        params: &CommentsSetModerationStatusParams,
    ) -> Result<()> {
        let rel_path = format!("youtube/v3/comments/setModerationStatus",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube SuperChatEvents service represents the SuperChatEvents resource.
pub struct SuperChatEventsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl SuperChatEventsService {
    /// Create a new SuperChatEventsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> SuperChatEventsService {
        SuperChatEventsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &SuperChatEventsListParams,
    ) -> Result<SuperChatEventListResponse> {
        let rel_path = format!("youtube/v3/superChatEvents",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube LiveChatModerators service represents the LiveChatModerators resource.
pub struct LiveChatModeratorsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl LiveChatModeratorsService {
    /// Create a new LiveChatModeratorsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> LiveChatModeratorsService {
        LiveChatModeratorsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &LiveChatModeratorsInsertParams,
        req: &LiveChatModerator,
    ) -> Result<LiveChatModerator> {
        let rel_path = format!("youtube/v3/liveChat/moderators",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &LiveChatModeratorsListParams,
    ) -> Result<LiveChatModeratorListResponse> {
        let rel_path = format!("youtube/v3/liveChat/moderators",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Deletes a chat moderator.
    pub async fn delete(&mut self, params: &LiveChatModeratorsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/liveChat/moderators",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube I18nLanguages service represents the I18nLanguages resource.
pub struct I18nLanguagesService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl I18nLanguagesService {
    /// Create a new I18nLanguagesService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> I18nLanguagesService {
        I18nLanguagesService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &I18nLanguagesListParams,
    ) -> Result<I18nLanguageListResponse> {
        let rel_path = format!("youtube/v3/i18nLanguages",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube ChannelBanners service represents the ChannelBanners resource.
pub struct ChannelBannersService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ChannelBannersService {
    /// Create a new ChannelBannersService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> ChannelBannersService {
        ChannelBannersService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &ChannelBannersInsertParams,
        req: &ChannelBannerResource,
    ) -> Result<ChannelBannerResource> {
        let rel_path = format!("youtube/v3/channelBanners/insert",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeUpload.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Inserts a new resource into this collection.
    ///
    /// This method is a variant of `insert()`, taking data for upload. It performs a multipart upload.
    pub async fn insert_upload(
        &mut self,
        params: &ChannelBannersInsertParams,
        req: &ChannelBannerResource,
        data: hyper::body::Bytes,
    ) -> Result<ChannelBannerResource> {
        let rel_path = format!("/upload/youtube/v3/channelBanners/insert",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeUpload.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=multipart{params}", params = params);

        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);

        do_upload_multipart(&self.client, &full_uri, &headers, "POST", opt_request, data).await
    }

    /// Inserts a new resource into this collection.
    ///
    /// This method is a variant of `insert()`, taking data for upload.
    /// It returns a `ResumableUpload` upload manager which you can use to stream larger amounts
    /// of data to the API. The result of this call will be returned by the `ResumableUpload` method
    /// you choose for the upload.
    pub async fn insert_resumable_upload<'client>(
        &'client mut self,
        params: &ChannelBannersInsertParams,
        req: &ChannelBannerResource,
    ) -> Result<ResumableUpload<'client, ChannelBannerResource>> {
        let rel_path = format!("/resumable/upload/youtube/v3/channelBanners/insert",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeUpload.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=resumable{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        let (_resp, headers): (EmptyResponse, hyper::HeaderMap) =
            do_request_with_headers(&self.client, &full_uri, &headers, "POST", opt_request).await?;
        if let Some(dest) = headers.get(hyper::header::LOCATION) {
            Ok(ResumableUpload::new(
                hyper::Uri::try_from(dest.to_str()?)?,
                &self.client,
                5 * 1024 * 1024,
            ))
        } else {
            Err(Error::from(ApiError::RedirectError(format!(
                "Resumable upload response didn't contain Location: {:?}",
                headers
            )))
            .context(format!("{:?}", headers)))?
        }
    }
}

/// The Youtube CommentThreads service represents the CommentThreads resource.
pub struct CommentThreadsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl CommentThreadsService {
    /// Create a new CommentThreadsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> CommentThreadsService {
        CommentThreadsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &CommentThreadsListParams,
    ) -> Result<CommentThreadListResponse> {
        let rel_path = format!("youtube/v3/commentThreads",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &CommentThreadsUpdateParams,
        req: &CommentThread,
    ) -> Result<CommentThread> {
        let rel_path = format!("youtube/v3/commentThreads",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &CommentThreadsInsertParams,
        req: &CommentThread,
    ) -> Result<CommentThread> {
        let rel_path = format!("youtube/v3/commentThreads",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeForceSsl.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube I18nRegions service represents the I18nRegions resource.
pub struct I18nRegionsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl I18nRegionsService {
    /// Create a new I18nRegionsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> I18nRegionsService {
        I18nRegionsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &I18nRegionsListParams) -> Result<I18nRegionListResponse> {
        let rel_path = format!("youtube/v3/i18nRegions",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube PlaylistItems service represents the PlaylistItems resource.
pub struct PlaylistItemsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl PlaylistItemsService {
    /// Create a new PlaylistItemsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> PlaylistItemsService {
        PlaylistItemsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &PlaylistItemsListParams,
    ) -> Result<PlaylistItemListResponse> {
        let rel_path = format!("youtube/v3/playlistItems",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(
        &mut self,
        params: &PlaylistItemsInsertParams,
        req: &PlaylistItem,
    ) -> Result<PlaylistItem> {
        let rel_path = format!("youtube/v3/playlistItems",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &PlaylistItemsUpdateParams,
        req: &PlaylistItem,
    ) -> Result<PlaylistItem> {
        let rel_path = format!("youtube/v3/playlistItems",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &PlaylistItemsDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/playlistItems",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }
}

/// The Youtube VideoAbuseReportReasons service represents the VideoAbuseReportReasons resource.
pub struct VideoAbuseReportReasonsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl VideoAbuseReportReasonsService {
    /// Create a new VideoAbuseReportReasonsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> VideoAbuseReportReasonsService {
        VideoAbuseReportReasonsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(
        &mut self,
        params: &VideoAbuseReportReasonsListParams,
    ) -> Result<VideoAbuseReportReasonListResponse> {
        let rel_path = format!("youtube/v3/videoAbuseReportReasons",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubeReadonly.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }
}

/// The Youtube Videos service represents the Videos resource.
pub struct VideosService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl VideosService {
    /// Create a new VideosService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> VideosService {
        VideosService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Deletes a resource.
    pub async fn delete(&mut self, params: &VideosDeleteParams) -> Result<()> {
        let rel_path = format!("youtube/v3/videos",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "DELETE", opt_request).await
    }

    /// Adds a like or dislike rating to a video or removes a rating from a video.
    pub async fn rate(&mut self, params: &VideosRateParams) -> Result<()> {
        let rel_path = format!("youtube/v3/videos/rate",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Inserts a new resource into this collection.
    pub async fn insert(&mut self, params: &VideosInsertParams, req: &Video) -> Result<Video> {
        let rel_path = format!("youtube/v3/videos",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }

    /// Inserts a new resource into this collection.
    ///
    /// This method is a variant of `insert()`, taking data for upload. It performs a multipart upload.
    pub async fn insert_upload(
        &mut self,
        params: &VideosInsertParams,
        req: &Video,
        data: hyper::body::Bytes,
    ) -> Result<Video> {
        let rel_path = format!("/upload/youtube/v3/videos",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=multipart{params}", params = params);

        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;
        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);

        do_upload_multipart(&self.client, &full_uri, &headers, "POST", opt_request, data).await
    }

    /// Inserts a new resource into this collection.
    ///
    /// This method is a variant of `insert()`, taking data for upload.
    /// It returns a `ResumableUpload` upload manager which you can use to stream larger amounts
    /// of data to the API. The result of this call will be returned by the `ResumableUpload` method
    /// you choose for the upload.
    pub async fn insert_resumable_upload<'client>(
        &'client mut self,
        params: &VideosInsertParams,
        req: &Video,
    ) -> Result<ResumableUpload<'client, Video>> {
        let rel_path = format!("/resumable/upload/youtube/v3/videos",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?uploadType=resumable{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        let (_resp, headers): (EmptyResponse, hyper::HeaderMap) =
            do_request_with_headers(&self.client, &full_uri, &headers, "POST", opt_request).await?;
        if let Some(dest) = headers.get(hyper::header::LOCATION) {
            Ok(ResumableUpload::new(
                hyper::Uri::try_from(dest.to_str()?)?,
                &self.client,
                5 * 1024 * 1024,
            ))
        } else {
            Err(Error::from(ApiError::RedirectError(format!(
                "Resumable upload response didn't contain Location: {:?}",
                headers
            )))
            .context(format!("{:?}", headers)))?
        }
    }

    /// Updates an existing resource.
    pub async fn update(&mut self, params: &VideosUpdateParams, req: &Video) -> Result<Video> {
        let rel_path = format!("youtube/v3/videos",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }

    /// Retrieves the ratings that the authorized user gave to a list of specified videos.
    pub async fn get_rating(
        &mut self,
        params: &VideosGetRatingParams,
    ) -> Result<VideoRatingListResponse> {
        let rel_path = format!("youtube/v3/videos/getRating",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &VideosListParams) -> Result<VideoListResponse> {
        let rel_path = format!("youtube/v3/videos",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Report abuse for a video.
    pub async fn report_abuse(
        &mut self,
        params: &VideosReportAbuseParams,
        req: &VideoAbuseReport,
    ) -> Result<()> {
        let rel_path = format!("youtube/v3/videos/reportAbuse",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "POST", opt_request).await
    }
}

/// The Youtube Channels service represents the Channels resource.
pub struct ChannelsService {
    client: TlsClient,
    authenticator: Box<dyn 'static + std::ops::Deref<Target = Authenticator>>,
    scopes: Vec<String>,

    base_url: String,
    root_url: String,
}

impl ChannelsService {
    /// Create a new ChannelsService object. The easiest way to call this is wrapping the Authenticator
    /// into an `Rc`: `new(client.clone(), Rc::new(authenticator))`.
    /// This way, one authenticator can be shared among several services.
    pub fn new<A: 'static + std::ops::Deref<Target = Authenticator>>(
        client: TlsClient,
        auth: A,
    ) -> ChannelsService {
        ChannelsService {
            client: client,
            authenticator: Box::new(auth),
            scopes: vec![],
            base_url: "https://youtube.googleapis.com/".into(),
            root_url: "https://youtube.googleapis.com/".into(),
        }
    }

    /// Provide the base URL of this API. The returned URL is guaranteed to end with a '/'.
    fn base_url(&self) -> String {
        if self.base_url.ends_with("/") {
            return self.base_url.clone();
        }
        return self.base_url.clone() + "/";
    }
    /// Provide the root URL of this API. The returned URL is guaranteed to end with a '/'.
    fn root_url(&self) -> String {
        if self.root_url.ends_with("/") {
            return self.root_url.clone();
        }
        return self.root_url.clone();
    }
    /// Returns appropriate URLs for relative and absolute paths.
    fn format_path(&self, path: &str) -> String {
        if path.starts_with("/") {
            return self.root_url().trim_end_matches("/").to_string() + path;
        } else {
            return self.base_url() + path;
        }
    }

    #[cfg(test)]
    /// Override API URLs. `base` is the base path relative to which (relative) method paths are interpreted,
    /// whereas `root` is the URL relative to which absolute paths are interpreted.
    pub fn set_urls(&mut self, base: String, root: String) {
        self.base_url = base;
        self.root_url = root;
    }

    /// Explicitly select which scopes should be requested for authorization. Otherwise,
    /// a possibly too large scope will be requested.
    ///
    /// It is most convenient to supply a vec or slice of YoutubeScopes enum values.
    pub fn set_scopes<S: AsRef<str>, T: AsRef<[S]>>(&mut self, scopes: T) {
        self.scopes = scopes
            .as_ref()
            .into_iter()
            .map(|s| s.as_ref().to_string())
            .collect();
    }

    /// Retrieves a list of resources, possibly filtered.
    pub async fn list(&mut self, params: &ChannelsListParams) -> Result<ChannelListResponse> {
        let rel_path = format!("youtube/v3/channels",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::YoutubepartnerChannelAudit
                .as_ref()
                .to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        do_request(&self.client, &full_uri, &headers, "GET", opt_request).await
    }

    /// Updates an existing resource.
    pub async fn update(
        &mut self,
        params: &ChannelsUpdateParams,
        req: &Channel,
    ) -> Result<Channel> {
        let rel_path = format!("youtube/v3/channels",);
        let path = self.format_path(rel_path.as_str());

        let mut headers = vec![];
        let tok;
        if self.scopes.is_empty() {
            let scopes = &[YoutubeScopes::Youtubepartner.as_ref().to_string()];
            tok = self.authenticator.token(scopes).await?;
        } else {
            tok = self.authenticator.token(&self.scopes).await?;
        }
        headers.push((
            hyper::header::AUTHORIZATION,
            format!("Bearer {token}", token = tok.as_str()),
        ));

        let mut url_params = format!("?{params}", params = params);
        if let Some(ref api_params) = &params.youtube_params {
            url_params.push_str(&format!("{}", api_params));
        }

        let full_uri = path + &url_params;

        let opt_request: Option<&EmptyRequest> = None;
        let opt_request = Some(req);
        do_request(&self.client, &full_uri, &headers, "PUT", opt_request).await
    }
}
